FUNCTION _Main_New : 
BASIC BLOCK 0 : 
  Def     = [ _T0 _T1 _T2 ]
  liveUse = [ ]
  liveIn  = [ ]
  liveOut = [ ]
  Use-Def Chain : 
    (_T0, 2): [1]
    (_T1, 5): [3]
    (_T2, 5): [4]
    (_T1, 6): [3]

    1: _T0 = 4    [ _T0 ]
    2: parm _T0    [ ]
    3: _T1 =  call _Alloc    [ _T1 ]
    4: _T2 = VTBL <_Main>    [ _T1 _T2 ]
    5: *(_T1 + 0) = _T2    [ _T1 ]
    6: END BY RETURN, result = _T1

FUNCTION main : 
BASIC BLOCK 0 : 
  Def     = [ _T4 _T5 _T6 ]
  liveUse = [ ]
  liveIn  = [ ]
  liveOut = [ _T4 ]
  Use-Def Chain : 
    (_T4, 3): [1]
    (_T5, 3): [2]
    (_T6, 4): [3]

    1: _T4 = 2    [ _T4 ]
    2: _T5 = 0    [ _T4 _T5 ]
    3: _T6 = (_T4 < _T5)    [ _T4 _T6 ]
    4: END BY BEQZ, if _T6 = 0 : goto 2; 1 : goto 1
BASIC BLOCK 1 : 
  Def     = [ _T7 ]
  liveUse = [ ]
  liveIn  = [ _T4 ]
  liveOut = [ _T4 ]
  Use-Def Chain : 
    (_T7, 6): [5]

    5: _T7 = "Decaf runtime error: Cannot create negative-sized array\n"    [ _T4 _T7 ]
    6: parm _T7    [ _T4 ]
    7: call _PrintString    [ _T4 ]
    8: call _Halt    [ _T4 ]
    9: END BY BRANCH, goto 2
BASIC BLOCK 2 : 
  Def     = [ _T8 _T9 _T10 _T11 _T12 ]
  liveUse = [ _T4 ]
  liveIn  = [ _T4 ]
  liveOut = [ _T8 _T10 _T11 _T12 ]
  Use-Def Chain : 
    (_T4, 11): [1]
    (_T8, 11): [10]
    (_T8, 12): [10]
    (_T9, 12): [11]
    (_T10, 13): [12]
    (_T4, 15): [1]
    (_T11, 15): [14]
    (_T10, 17): [12]
    (_T11, 17): [14]

    10: _T8 = 4    [ _T4 _T8 ]
    11: _T9 = (_T8 * _T4)    [ _T4 _T8 _T9 ]
    12: _T10 = (_T8 + _T9)    [ _T4 _T8 _T10 ]
    13: parm _T10    [ _T4 _T8 _T10 ]
    14: _T11 =  call _Alloc    [ _T4 _T8 _T10 _T11 ]
    15: *(_T11 + 0) = _T4    [ _T8 _T10 _T11 ]
    16: _T12 = 0    [ _T8 _T10 _T11 _T12 ]
    17: _T11 = (_T11 + _T10)    [ _T8 _T10 _T11 _T12 ]
    18: END BY BRANCH, goto 3
BASIC BLOCK 3 : 
  Def     = [ ]
  liveUse = [ _T8 _T10 ]
  liveIn  = [ _T8 _T10 _T11 _T12 ]
  liveOut = [ _T8 _T10 _T11 _T12 ]
  Use-Def Chain : 
    (_T8, 19): [10]
    (_T10, 19): [12, 19]
    (_T10, 20): [19]

    19: _T10 = (_T10 - _T8)    [ _T8 _T10 _T11 _T12 ]
    20: END BY BEQZ, if _T10 = 0 : goto 5; 1 : goto 4
BASIC BLOCK 4 : 
  Def     = [ ]
  liveUse = [ _T8 _T11 _T12 ]
  liveIn  = [ _T8 _T10 _T11 _T12 ]
  liveOut = [ _T8 _T10 _T11 _T12 ]
  Use-Def Chain : 
    (_T8, 21): [10]
    (_T11, 21): [17, 21]
    (_T11, 22): [21]
    (_T12, 22): [16]

    21: _T11 = (_T11 - _T8)    [ _T8 _T10 _T11 _T12 ]
    22: *(_T11 + 0) = _T12    [ _T8 _T10 _T11 _T12 ]
    23: END BY BRANCH, goto 3
BASIC BLOCK 5 : 
  Def     = [ _T3 _T13 _T14 _T15 ]
  liveUse = [ _T11 ]
  liveIn  = [ _T11 ]
  liveOut = [ _T3 _T13 ]
  Use-Def Chain : 
    (_T11, 25): [17, 21]
    (_T3, 27): [25]
    (_T13, 28): [26]
    (_T14, 28): [27]
    (_T15, 29): [28]

    25: _T3 = _T11    [ _T3 ]
    26: _T13 = 2    [ _T3 _T13 ]
    27: _T14 = *(_T3 - 4)    [ _T3 _T13 _T14 ]
    28: _T15 = (_T13 < _T14)    [ _T3 _T13 _T15 ]
    29: END BY BEQZ, if _T15 = 0 : goto 7; 1 : goto 6
BASIC BLOCK 6 : 
  Def     = [ _T16 _T17 ]
  liveUse = [ _T13 ]
  liveIn  = [ _T3 _T13 ]
  liveOut = [ _T3 _T13 ]
  Use-Def Chain : 
    (_T13, 31): [26]
    (_T16, 31): [30]
    (_T17, 32): [31]

    30: _T16 = 0    [ _T16 _T3 _T13 ]
    31: _T17 = (_T13 < _T16)    [ _T17 _T3 _T13 ]
    32: END BY BEQZ, if _T17 = 0 : goto 8; 1 : goto 7
BASIC BLOCK 7 : 
  Def     = [ _T18 ]
  liveUse = [ ]
  liveIn  = [ _T3 _T13 ]
  liveOut = [ _T3 _T13 ]
  Use-Def Chain : 
    (_T18, 35): [34]

    34: _T18 = "Decaf runtime error: Array subscript out of bounds\n"    [ _T18 _T3 _T13 ]
    35: parm _T18    [ _T3 _T13 ]
    36: call _PrintString    [ _T3 _T13 ]
    37: call _Halt    [ _T3 _T13 ]
    38: END BY BRANCH, goto 8
BASIC BLOCK 8 : 
  Def     = [ _T19 _T20 _T21 _T22 _T23 _T24 _T25 _T26 ]
  liveUse = [ _T3 _T13 ]
  liveIn  = [ _T3 _T13 ]
  liveOut = [ ]
  Use-Def Chain : 
    (_T13, 40): [26]
    (_T19, 40): [39]
    (_T3, 41): [25]
    (_T20, 41): [40]
    (_T21, 42): [41]
    (_T13, 45): [26]
    (_T24, 45): [44]
    (_T3, 46): [25]
    (_T25, 46): [45]
    (_T23, 47): [43]
    (_T26, 47): [46]

    39: _T19 = 4    [ _T3 _T19 _T13 ]
    40: _T20 = (_T13 * _T19)    [ _T3 _T20 _T13 ]
    41: _T21 = (_T3 + _T20)    [ _T3 _T21 _T13 ]
    42: _T22 = *(_T21 + 0)    [ _T3 _T13 ]
    43: _T23 = 0    [ _T3 _T23 _T13 ]
    44: _T24 = 4    [ _T3 _T23 _T24 _T13 ]
    45: _T25 = (_T13 * _T24)    [ _T3 _T23 _T25 ]
    46: _T26 = (_T3 + _T25)    [ _T23 _T26 ]
    47: *(_T26 + 0) = _T23    [ ]
    48: END BY RETURN, void result

