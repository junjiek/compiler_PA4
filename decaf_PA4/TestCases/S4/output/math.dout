FUNCTION _Math_New : 
BASIC BLOCK 0 : 
  Def     = [ _T8 _T9 _T10 ]
  liveUse = [ ]
  liveIn  = [ ]
  liveOut = [ ]
  Use-Def Chain : 
    (_T8, 2): [1]
    (_T9, 5): [3]
    (_T10, 5): [4]
    (_T9, 6): [3]

    1: _T8 = 4    [ _T8 ]
    2: parm _T8    [ ]
    3: _T9 =  call _Alloc    [ _T9 ]
    4: _T10 = VTBL <_Math>    [ _T9 _T10 ]
    5: *(_T9 + 0) = _T10    [ _T9 ]
    6: END BY RETURN, result = _T9

FUNCTION _Main_New : 
BASIC BLOCK 0 : 
  Def     = [ _T11 _T12 _T13 ]
  liveUse = [ ]
  liveIn  = [ ]
  liveOut = [ ]
  Use-Def Chain : 
    (_T11, 2): [1]
    (_T12, 5): [3]
    (_T13, 5): [4]
    (_T12, 6): [3]

    1: _T11 = 4    [ _T11 ]
    2: parm _T11    [ ]
    3: _T12 =  call _Alloc    [ _T12 ]
    4: _T13 = VTBL <_Main>    [ _T12 _T13 ]
    5: *(_T12 + 0) = _T13    [ _T12 ]
    6: END BY RETURN, result = _T12

FUNCTION _Math.abs : 
BASIC BLOCK 0 : 
  Def     = [ _T14 _T15 ]
  liveUse = [ _T0 ]
  liveIn  = [ _T0 ]
  liveOut = [ _T0 ]
  Use-Def Chain : 
    (_T0, 2): []
    (_T14, 2): [1]
    (_T15, 3): [2]

    1: _T14 = 0    [ _T0 _T14 ]
    2: _T15 = (_T0 >= _T14)    [ _T0 _T15 ]
    3: END BY BEQZ, if _T15 = 0 : goto 2; 1 : goto 1
BASIC BLOCK 1 : 
  Def     = [ ]
  liveUse = [ _T0 ]
  liveIn  = [ _T0 ]
  liveOut = [ _T0 ]
  Use-Def Chain : 
    (_T0, 0): []

    0: END BY RETURN, result = _T0
BASIC BLOCK 2 : 
  Def     = [ _T16 ]
  liveUse = [ _T0 ]
  liveIn  = [ _T0 ]
  liveOut = [ _T0 ]
  Use-Def Chain : 
    (_T0, 7): []
    (_T16, 8): [7]

    7: _T16 = - _T0    [ _T0 _T16 ]
    8: END BY RETURN, result = _T16
BASIC BLOCK 3 : 
  Def     = [ ]
  liveUse = [ ]
  liveIn  = [ _T0 ]
  liveOut = [ _T0 ]
  Use-Def Chain : 

    0: END BY RETURN, void result

FUNCTION _Math.pow : 
BASIC BLOCK 0 : 
  Def     = [ _T17 _T18 _T19 _T20 ]
  liveUse = [ ]
  liveIn  = [ _T1 _T2 ]
  liveOut = [ _T1 _T2 _T17 _T18 ]
  Use-Def Chain : 
    (_T19, 2): [1]
    (_T20, 4): [3]

    1: _T19 = 1    [ _T1 _T2 _T19 ]
    2: _T18 = _T19    [ _T1 _T2 _T18 ]
    3: _T20 = 0    [ _T1 _T2 _T18 _T20 ]
    4: _T17 = _T20    [ _T1 _T17 _T2 _T18 ]
    5: END BY BRANCH, goto 2
BASIC BLOCK 1 : 
  Def     = [ _T21 _T22 ]
  liveUse = [ _T17 ]
  liveIn  = [ _T1 _T2 _T17 _T18 ]
  liveOut = [ _T1 _T2 _T17 _T18 ]
  Use-Def Chain : 
    (_T17, 8): [4, 9]
    (_T21, 8): [7]
    (_T22, 9): [8]

    7: _T21 = 1    [ _T1 _T17 _T2 _T18 _T21 ]
    8: _T22 = (_T17 + _T21)    [ _T1 _T2 _T18 _T22 ]
    9: _T17 = _T22    [ _T1 _T17 _T2 _T18 ]
    10: END BY BRANCH, goto 2
BASIC BLOCK 2 : 
  Def     = [ _T23 ]
  liveUse = [ _T2 _T17 ]
  liveIn  = [ _T1 _T2 _T17 _T18 ]
  liveOut = [ _T1 _T2 _T17 _T18 ]
  Use-Def Chain : 
    (_T2, 11): []
    (_T17, 11): [4, 9]
    (_T23, 12): [11]

    11: _T23 = (_T17 < _T2)    [ _T1 _T17 _T2 _T18 _T23 ]
    12: END BY BEQZ, if _T23 = 0 : goto 4; 1 : goto 3
BASIC BLOCK 3 : 
  Def     = [ _T24 ]
  liveUse = [ _T1 _T18 ]
  liveIn  = [ _T1 _T2 _T17 _T18 ]
  liveOut = [ _T1 _T2 _T17 _T18 ]
  Use-Def Chain : 
    (_T1, 13): []
    (_T18, 13): [2, 14]
    (_T24, 14): [13]

    13: _T24 = (_T18 * _T1)    [ _T1 _T17 _T2 _T24 ]
    14: _T18 = _T24    [ _T1 _T17 _T2 _T18 ]
    15: END BY BRANCH, goto 1
BASIC BLOCK 4 : 
  Def     = [ ]
  liveUse = [ _T18 ]
  liveIn  = [ _T1 _T2 _T18 ]
  liveOut = [ _T1 _T2 ]
  Use-Def Chain : 
    (_T18, 0): [2, 14]

    0: END BY RETURN, result = _T18

FUNCTION _Math.log : 
BASIC BLOCK 0 : 
  Def     = [ _T25 _T26 ]
  liveUse = [ _T3 ]
  liveIn  = [ _T3 ]
  liveOut = [ _T3 ]
  Use-Def Chain : 
    (_T3, 2): []
    (_T25, 2): [1]
    (_T26, 3): [2]

    1: _T25 = 1    [ _T3 _T25 ]
    2: _T26 = (_T3 < _T25)    [ _T3 _T26 ]
    3: END BY BEQZ, if _T26 = 0 : goto 2; 1 : goto 1
BASIC BLOCK 1 : 
  Def     = [ _T27 _T28 ]
  liveUse = [ ]
  liveIn  = [ _T3 ]
  liveOut = [ _T3 ]
  Use-Def Chain : 
    (_T27, 5): [4]
    (_T28, 6): [5]

    4: _T27 = 1    [ _T3 _T27 ]
    5: _T28 = - _T27    [ _T3 _T28 ]
    6: END BY RETURN, result = _T28
BASIC BLOCK 2 : 
  Def     = [ _T29 _T30 ]
  liveUse = [ ]
  liveIn  = [ _T3 ]
  liveOut = [ _T3 _T29 ]
  Use-Def Chain : 
    (_T30, 9): [8]

    8: _T30 = 0    [ _T3 _T30 ]
    9: _T29 = _T30    [ _T3 _T29 ]
    10: END BY BRANCH, goto 3
BASIC BLOCK 3 : 
  Def     = [ _T31 _T32 ]
  liveUse = [ _T3 ]
  liveIn  = [ _T3 _T29 ]
  liveOut = [ _T3 _T29 ]
  Use-Def Chain : 
    (_T3, 12): [19]
    (_T31, 12): [11]
    (_T32, 13): [12]

    11: _T31 = 1    [ _T3 _T29 _T31 ]
    12: _T32 = (_T3 > _T31)    [ _T32 _T3 _T29 ]
    13: END BY BEQZ, if _T32 = 0 : goto 5; 1 : goto 4
BASIC BLOCK 4 : 
  Def     = [ _T33 _T34 _T35 _T36 ]
  liveUse = [ _T3 _T29 ]
  liveIn  = [ _T3 _T29 ]
  liveOut = [ _T3 _T29 ]
  Use-Def Chain : 
    (_T29, 15): [9, 16]
    (_T33, 15): [14]
    (_T34, 16): [15]
    (_T3, 18): [19]
    (_T35, 18): [17]
    (_T36, 19): [18]

    14: _T33 = 1    [ _T33 _T3 _T29 ]
    15: _T34 = (_T29 + _T33)    [ _T34 _T3 ]
    16: _T29 = _T34    [ _T3 _T29 ]
    17: _T35 = 2    [ _T3 _T35 _T29 ]
    18: _T36 = (_T3 / _T35)    [ _T36 _T29 ]
    19: _T3 = _T36    [ _T3 _T29 ]
    20: END BY BRANCH, goto 3
BASIC BLOCK 5 : 
  Def     = [ ]
  liveUse = [ _T29 ]
  liveIn  = [ _T3 _T29 ]
  liveOut = [ _T3 ]
  Use-Def Chain : 
    (_T29, 0): [9, 16]

    0: END BY RETURN, result = _T29

FUNCTION _Math.max : 
BASIC BLOCK 0 : 
  Def     = [ _T37 ]
  liveUse = [ _T4 _T5 ]
  liveIn  = [ _T4 _T5 ]
  liveOut = [ _T4 _T5 ]
  Use-Def Chain : 
    (_T4, 1): []
    (_T5, 1): []
    (_T37, 2): [1]

    1: _T37 = (_T4 > _T5)    [ _T4 _T5 _T37 ]
    2: END BY BEQZ, if _T37 = 0 : goto 2; 1 : goto 1
BASIC BLOCK 1 : 
  Def     = [ ]
  liveUse = [ _T4 ]
  liveIn  = [ _T4 _T5 ]
  liveOut = [ _T4 _T5 ]
  Use-Def Chain : 
    (_T4, 0): []

    0: END BY RETURN, result = _T4
BASIC BLOCK 2 : 
  Def     = [ ]
  liveUse = [ _T5 ]
  liveIn  = [ _T4 _T5 ]
  liveOut = [ _T4 _T5 ]
  Use-Def Chain : 
    (_T5, 0): []

    0: END BY RETURN, result = _T5
BASIC BLOCK 3 : 
  Def     = [ ]
  liveUse = [ ]
  liveIn  = [ _T4 _T5 ]
  liveOut = [ _T4 _T5 ]
  Use-Def Chain : 

    0: END BY RETURN, void result

FUNCTION _Math.min : 
BASIC BLOCK 0 : 
  Def     = [ _T38 ]
  liveUse = [ _T6 _T7 ]
  liveIn  = [ _T6 _T7 ]
  liveOut = [ _T6 _T7 ]
  Use-Def Chain : 
    (_T6, 1): []
    (_T7, 1): []
    (_T38, 2): [1]

    1: _T38 = (_T6 < _T7)    [ _T6 _T38 _T7 ]
    2: END BY BEQZ, if _T38 = 0 : goto 2; 1 : goto 1
BASIC BLOCK 1 : 
  Def     = [ ]
  liveUse = [ _T6 ]
  liveIn  = [ _T6 _T7 ]
  liveOut = [ _T6 _T7 ]
  Use-Def Chain : 
    (_T6, 0): []

    0: END BY RETURN, result = _T6
BASIC BLOCK 2 : 
  Def     = [ ]
  liveUse = [ _T7 ]
  liveIn  = [ _T6 _T7 ]
  liveOut = [ _T6 _T7 ]
  Use-Def Chain : 
    (_T7, 0): []

    0: END BY RETURN, result = _T7
BASIC BLOCK 3 : 
  Def     = [ ]
  liveUse = [ ]
  liveIn  = [ _T6 _T7 ]
  liveOut = [ _T6 _T7 ]
  Use-Def Chain : 

    0: END BY RETURN, void result

FUNCTION main : 
BASIC BLOCK 0 : 
  Def     = [ _T39 _T40 _T41 _T42 _T43 _T44 _T45 _T46 _T47 _T48 _T49 _T50 _T51 _T52 _T53 _T54 _T55 _T56 _T57 ]
  liveUse = [ ]
  liveIn  = [ ]
  liveOut = [ ]
  Use-Def Chain : 
    (_T39, 2): [1]
    (_T40, 3): [2]
    (_T41, 5): [4]
    (_T42, 8): [7]
    (_T43, 12): [10]
    (_T44, 13): [11]
    (_T45, 15): [14]
    (_T46, 18): [17]
    (_T47, 21): [20]
    (_T48, 23): [22]
    (_T49, 26): [25]
    (_T50, 30): [28]
    (_T51, 31): [29]
    (_T52, 33): [32]
    (_T53, 36): [35]
    (_T54, 40): [38]
    (_T55, 41): [39]
    (_T56, 43): [42]
    (_T57, 46): [45]

    1: _T39 = 1    [ _T39 ]
    2: _T40 = - _T39    [ _T40 ]
    3: parm _T40    [ ]
    4: _T41 =  call _Math.abs    [ _T41 ]
    5: parm _T41    [ ]
    6: call _PrintInt    [ ]
    7: _T42 = "\n"    [ _T42 ]
    8: parm _T42    [ ]
    9: call _PrintString    [ ]
    10: _T43 = 2    [ _T43 ]
    11: _T44 = 3    [ _T43 _T44 ]
    12: parm _T43    [ _T44 ]
    13: parm _T44    [ ]
    14: _T45 =  call _Math.pow    [ _T45 ]
    15: parm _T45    [ ]
    16: call _PrintInt    [ ]
    17: _T46 = "\n"    [ _T46 ]
    18: parm _T46    [ ]
    19: call _PrintString    [ ]
    20: _T47 = 16    [ _T47 ]
    21: parm _T47    [ ]
    22: _T48 =  call _Math.log    [ _T48 ]
    23: parm _T48    [ ]
    24: call _PrintInt    [ ]
    25: _T49 = "\n"    [ _T49 ]
    26: parm _T49    [ ]
    27: call _PrintString    [ ]
    28: _T50 = 1    [ _T50 ]
    29: _T51 = 2    [ _T50 _T51 ]
    30: parm _T50    [ _T51 ]
    31: parm _T51    [ ]
    32: _T52 =  call _Math.max    [ _T52 ]
    33: parm _T52    [ ]
    34: call _PrintInt    [ ]
    35: _T53 = "\n"    [ _T53 ]
    36: parm _T53    [ ]
    37: call _PrintString    [ ]
    38: _T54 = 1    [ _T54 ]
    39: _T55 = 2    [ _T54 _T55 ]
    40: parm _T54    [ _T55 ]
    41: parm _T55    [ ]
    42: _T56 =  call _Math.min    [ _T56 ]
    43: parm _T56    [ ]
    44: call _PrintInt    [ ]
    45: _T57 = "\n"    [ _T57 ]
    46: parm _T57    [ ]
    47: call _PrintString    [ ]
    48: END BY RETURN, void result

