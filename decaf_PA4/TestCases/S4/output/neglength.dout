FUNCTION _Main_New : 
BASIC BLOCK 0 : 
  Def     = [ _T2 _T3 _T4 _T5 ]
  liveUse = [ ]
  liveIn  = [ ]
  liveOut = [ ]
  Use-Def Chain : 
    (_T2, 2): [1]
    (_T3, 5): [3]
    (_T4, 5): [4]
    (_T3, 7): [3]
    (_T5, 7): [6]
    (_T3, 8): [3]

    1: _T2 = 8    [ _T2 ]
    2: parm _T2    [ ]
    3: _T3 =  call _Alloc    [ _T3 ]
    4: _T4 = 0    [ _T3 _T4 ]
    5: *(_T3 + 4) = _T4    [ _T3 ]
    6: _T5 = VTBL <_Main>    [ _T3 _T5 ]
    7: *(_T3 + 0) = _T5    [ _T3 ]
    8: END BY RETURN, result = _T3

FUNCTION main : 
BASIC BLOCK 0 : 
  Def     = [ _T6 _T7 _T8 _T9 _T10 ]
  liveUse = [ ]
  liveIn  = [ ]
  liveOut = [ ]
  Use-Def Chain : 
    (_T7, 3): [2]
    (_T6, 4): [1]
    (_T8, 5): [3]
    (_T6, 6): [1]
    (_T9, 7): [6]
    (_T10, 8): [7]

    1: _T6 =  call _Main_New    [ _T6 ]
    2: _T7 = 1    [ _T6 _T7 ]
    3: _T8 = - _T7    [ _T6 _T8 ]
    4: parm _T6    [ _T6 _T8 ]
    5: parm _T8    [ _T6 ]
    6: _T9 = *(_T6 + 0)    [ _T9 ]
    7: _T10 = *(_T9 + 8)    [ _T10 ]
    8: call _T10    [ ]
    9: END BY RETURN, void result

FUNCTION _Main.create : 
BASIC BLOCK 0 : 
  Def     = [ _T11 _T12 _T13 ]
  liveUse = [ _T0 _T1 ]
  liveIn  = [ _T0 _T1 ]
  liveOut = [ _T0 _T1 ]
  Use-Def Chain : 
    (_T0, 1): []
    (_T1, 3): []
    (_T12, 3): [2]
    (_T13, 4): [3]

    1: _T11 = *(_T0 + 4)    [ _T0 _T1 ]
    2: _T12 = 0    [ _T0 _T1 _T12 ]
    3: _T13 = (_T1 < _T12)    [ _T0 _T1 _T13 ]
    4: END BY BEQZ, if _T13 = 0 : goto 2; 1 : goto 1
BASIC BLOCK 1 : 
  Def     = [ _T14 ]
  liveUse = [ ]
  liveIn  = [ _T0 _T1 ]
  liveOut = [ _T0 _T1 ]
  Use-Def Chain : 
    (_T14, 6): [5]

    5: _T14 = "Decaf runtime error: Cannot create negative-sized array\n"    [ _T0 _T1 _T14 ]
    6: parm _T14    [ _T0 _T1 ]
    7: call _PrintString    [ _T0 _T1 ]
    8: call _Halt    [ _T0 _T1 ]
    9: END BY BRANCH, goto 2
BASIC BLOCK 2 : 
  Def     = [ _T15 _T16 _T17 _T18 _T19 ]
  liveUse = [ _T1 ]
  liveIn  = [ _T0 _T1 ]
  liveOut = [ _T0 _T1 _T15 _T17 _T18 _T19 ]
  Use-Def Chain : 
    (_T1, 11): []
    (_T15, 11): [10]
    (_T15, 12): [10]
    (_T16, 12): [11]
    (_T17, 13): [12]
    (_T1, 15): []
    (_T18, 15): [14]
    (_T17, 17): [12]
    (_T18, 17): [14]

    10: _T15 = 4    [ _T0 _T1 _T15 ]
    11: _T16 = (_T15 * _T1)    [ _T0 _T16 _T1 _T15 ]
    12: _T17 = (_T15 + _T16)    [ _T0 _T1 _T17 _T15 ]
    13: parm _T17    [ _T0 _T1 _T17 _T15 ]
    14: _T18 =  call _Alloc    [ _T0 _T1 _T17 _T18 _T15 ]
    15: *(_T18 + 0) = _T1    [ _T0 _T1 _T17 _T18 _T15 ]
    16: _T19 = 0    [ _T0 _T1 _T17 _T18 _T19 _T15 ]
    17: _T18 = (_T18 + _T17)    [ _T0 _T1 _T17 _T18 _T19 _T15 ]
    18: END BY BRANCH, goto 3
BASIC BLOCK 3 : 
  Def     = [ ]
  liveUse = [ _T15 _T17 ]
  liveIn  = [ _T0 _T1 _T15 _T17 _T18 _T19 ]
  liveOut = [ _T0 _T1 _T15 _T17 _T18 _T19 ]
  Use-Def Chain : 
    (_T15, 19): [10]
    (_T17, 19): [12, 19]
    (_T17, 20): [19]

    19: _T17 = (_T17 - _T15)    [ _T0 _T1 _T17 _T18 _T19 _T15 ]
    20: END BY BEQZ, if _T17 = 0 : goto 5; 1 : goto 4
BASIC BLOCK 4 : 
  Def     = [ ]
  liveUse = [ _T15 _T18 _T19 ]
  liveIn  = [ _T0 _T1 _T15 _T17 _T18 _T19 ]
  liveOut = [ _T0 _T1 _T15 _T17 _T18 _T19 ]
  Use-Def Chain : 
    (_T15, 21): [10]
    (_T18, 21): [17, 21]
    (_T18, 22): [21]
    (_T19, 22): [16]

    21: _T18 = (_T18 - _T15)    [ _T0 _T1 _T17 _T18 _T19 _T15 ]
    22: *(_T18 + 0) = _T19    [ _T0 _T1 _T17 _T18 _T19 _T15 ]
    23: END BY BRANCH, goto 3
BASIC BLOCK 5 : 
  Def     = [ ]
  liveUse = [ _T0 _T18 ]
  liveIn  = [ _T0 _T1 _T18 ]
  liveOut = [ _T0 _T1 ]
  Use-Def Chain : 
    (_T0, 25): []
    (_T18, 25): [17, 21]

    25: *(_T0 + 4) = _T18    [ _T0 _T1 ]
    26: END BY RETURN, void result

