FUNCTION _Stack_New : 
BASIC BLOCK 0 : 
  Def     = [ _T5 _T6 _T7 _T8 ]
  liveUse = [ ]
  liveIn  = [ ]
  liveOut = [ ]
  Use-Def Chain : 
    (_T5, 2): [1]
    (_T6, 5): [3]
    (_T7, 5): [4]
    (_T6, 6): [3]
    (_T7, 6): [4]
    (_T6, 8): [3]
    (_T8, 8): [7]
    (_T6, 9): [3]

    1: _T5 = 12    [ _T5 ]
    2: parm _T5    [ ]
    3: _T6 =  call _Alloc    [ _T6 ]
    4: _T7 = 0    [ _T6 _T7 ]
    5: *(_T6 + 4) = _T7    [ _T6 _T7 ]
    6: *(_T6 + 8) = _T7    [ _T6 ]
    7: _T8 = VTBL <_Stack>    [ _T6 _T8 ]
    8: *(_T6 + 0) = _T8    [ _T6 ]
    9: END BY RETURN, result = _T6

FUNCTION _Main_New : 
BASIC BLOCK 0 : 
  Def     = [ _T9 _T10 _T11 ]
  liveUse = [ ]
  liveIn  = [ ]
  liveOut = [ ]
  Use-Def Chain : 
    (_T9, 2): [1]
    (_T10, 5): [3]
    (_T11, 5): [4]
    (_T10, 6): [3]

    1: _T9 = 4    [ _T9 ]
    2: parm _T9    [ ]
    3: _T10 =  call _Alloc    [ _T10 ]
    4: _T11 = VTBL <_Main>    [ _T10 _T11 ]
    5: *(_T10 + 0) = _T11    [ _T10 ]
    6: END BY RETURN, result = _T10

FUNCTION _Stack.Init : 
BASIC BLOCK 0 : 
  Def     = [ _T12 _T13 _T14 _T15 ]
  liveUse = [ _T0 ]
  liveIn  = [ _T0 ]
  liveOut = [ _T0 _T13 ]
  Use-Def Chain : 
    (_T0, 1): []
    (_T13, 4): [2]
    (_T14, 4): [3]
    (_T15, 5): [4]

    1: _T12 = *(_T0 + 8)    [ _T0 ]
    2: _T13 = 100    [ _T0 _T13 ]
    3: _T14 = 0    [ _T0 _T13 _T14 ]
    4: _T15 = (_T13 < _T14)    [ _T0 _T13 _T15 ]
    5: END BY BEQZ, if _T15 = 0 : goto 2; 1 : goto 1
BASIC BLOCK 1 : 
  Def     = [ _T16 ]
  liveUse = [ ]
  liveIn  = [ _T0 _T13 ]
  liveOut = [ _T0 _T13 ]
  Use-Def Chain : 
    (_T16, 7): [6]

    6: _T16 = "Decaf runtime error: Cannot create negative-sized array\n"    [ _T0 _T16 _T13 ]
    7: parm _T16    [ _T0 _T13 ]
    8: call _PrintString    [ _T0 _T13 ]
    9: call _Halt    [ _T0 _T13 ]
    10: END BY BRANCH, goto 2
BASIC BLOCK 2 : 
  Def     = [ _T17 _T18 _T19 _T20 _T21 ]
  liveUse = [ _T13 ]
  liveIn  = [ _T0 _T13 ]
  liveOut = [ _T0 _T17 _T19 _T20 _T21 ]
  Use-Def Chain : 
    (_T13, 12): [2]
    (_T17, 12): [11]
    (_T17, 13): [11]
    (_T18, 13): [12]
    (_T19, 14): [13]
    (_T13, 16): [2]
    (_T20, 16): [15]
    (_T19, 18): [13]
    (_T20, 18): [15]

    11: _T17 = 4    [ _T0 _T17 _T13 ]
    12: _T18 = (_T17 * _T13)    [ _T0 _T17 _T18 _T13 ]
    13: _T19 = (_T17 + _T18)    [ _T0 _T17 _T19 _T13 ]
    14: parm _T19    [ _T0 _T17 _T19 _T13 ]
    15: _T20 =  call _Alloc    [ _T0 _T17 _T19 _T20 _T13 ]
    16: *(_T20 + 0) = _T13    [ _T0 _T17 _T19 _T20 ]
    17: _T21 = 0    [ _T0 _T17 _T19 _T20 _T21 ]
    18: _T20 = (_T20 + _T19)    [ _T0 _T17 _T19 _T20 _T21 ]
    19: END BY BRANCH, goto 3
BASIC BLOCK 3 : 
  Def     = [ ]
  liveUse = [ _T17 _T19 ]
  liveIn  = [ _T0 _T17 _T19 _T20 _T21 ]
  liveOut = [ _T0 _T17 _T19 _T20 _T21 ]
  Use-Def Chain : 
    (_T17, 20): [11]
    (_T19, 20): [13, 20]
    (_T19, 21): [20]

    20: _T19 = (_T19 - _T17)    [ _T0 _T17 _T19 _T20 _T21 ]
    21: END BY BEQZ, if _T19 = 0 : goto 5; 1 : goto 4
BASIC BLOCK 4 : 
  Def     = [ ]
  liveUse = [ _T17 _T20 _T21 ]
  liveIn  = [ _T0 _T17 _T19 _T20 _T21 ]
  liveOut = [ _T0 _T17 _T19 _T20 _T21 ]
  Use-Def Chain : 
    (_T17, 22): [11]
    (_T20, 22): [18, 22]
    (_T20, 23): [22]
    (_T21, 23): [17]

    22: _T20 = (_T20 - _T17)    [ _T0 _T17 _T19 _T20 _T21 ]
    23: *(_T20 + 0) = _T21    [ _T0 _T17 _T19 _T20 _T21 ]
    24: END BY BRANCH, goto 3
BASIC BLOCK 5 : 
  Def     = [ _T22 _T23 _T24 _T25 _T26 ]
  liveUse = [ _T0 _T20 ]
  liveIn  = [ _T0 _T20 ]
  liveOut = [ _T0 ]
  Use-Def Chain : 
    (_T0, 26): []
    (_T20, 26): [18, 22]
    (_T0, 27): []
    (_T0, 29): []
    (_T23, 29): [28]
    (_T0, 31): []
    (_T24, 32): [30]
    (_T0, 33): []
    (_T25, 34): [33]
    (_T26, 35): [34]

    26: *(_T0 + 8) = _T20    [ _T0 ]
    27: _T22 = *(_T0 + 4)    [ _T0 ]
    28: _T23 = 0    [ _T0 _T23 ]
    29: *(_T0 + 4) = _T23    [ _T0 ]
    30: _T24 = 3    [ _T0 _T24 ]
    31: parm _T0    [ _T0 _T24 ]
    32: parm _T24    [ _T0 ]
    33: _T25 = *(_T0 + 0)    [ _T0 _T25 ]
    34: _T26 = *(_T25 + 12)    [ _T0 _T26 ]
    35: call _T26    [ _T0 ]
    36: END BY RETURN, void result

FUNCTION _Stack.Push : 
BASIC BLOCK 0 : 
  Def     = [ _T27 _T28 _T29 _T30 ]
  liveUse = [ _T1 ]
  liveIn  = [ _T1 _T2 ]
  liveOut = [ _T1 _T2 _T27 _T28 ]
  Use-Def Chain : 
    (_T1, 1): []
    (_T1, 2): []
    (_T27, 3): [1]
    (_T28, 4): [2]
    (_T29, 4): [3]
    (_T30, 5): [4]

    1: _T27 = *(_T1 + 8)    [ _T1 _T2 _T27 ]
    2: _T28 = *(_T1 + 4)    [ _T1 _T2 _T27 _T28 ]
    3: _T29 = *(_T27 - 4)    [ _T1 _T2 _T27 _T28 _T29 ]
    4: _T30 = (_T28 < _T29)    [ _T1 _T2 _T27 _T28 _T30 ]
    5: END BY BEQZ, if _T30 = 0 : goto 2; 1 : goto 1
BASIC BLOCK 1 : 
  Def     = [ _T31 _T32 ]
  liveUse = [ _T28 ]
  liveIn  = [ _T1 _T2 _T27 _T28 ]
  liveOut = [ _T1 _T2 _T27 _T28 ]
  Use-Def Chain : 
    (_T28, 7): [2]
    (_T31, 7): [6]
    (_T32, 8): [7]

    6: _T31 = 0    [ _T1 _T2 _T27 _T28 _T31 ]
    7: _T32 = (_T28 < _T31)    [ _T32 _T1 _T2 _T27 _T28 ]
    8: END BY BEQZ, if _T32 = 0 : goto 3; 1 : goto 2
BASIC BLOCK 2 : 
  Def     = [ _T33 ]
  liveUse = [ ]
  liveIn  = [ _T1 _T2 _T27 _T28 ]
  liveOut = [ _T1 _T2 _T27 _T28 ]
  Use-Def Chain : 
    (_T33, 11): [10]

    10: _T33 = "Decaf runtime error: Array subscript out of bounds\n"    [ _T1 _T33 _T2 _T27 _T28 ]
    11: parm _T33    [ _T1 _T2 _T27 _T28 ]
    12: call _PrintString    [ _T1 _T2 _T27 _T28 ]
    13: call _Halt    [ _T1 _T2 _T27 _T28 ]
    14: END BY BRANCH, goto 3
BASIC BLOCK 3 : 
  Def     = [ _T34 _T35 _T36 _T37 _T38 _T39 _T40 _T41 _T42 _T43 _T44 ]
  liveUse = [ _T1 _T2 _T27 _T28 ]
  liveIn  = [ _T1 _T2 _T27 _T28 ]
  liveOut = [ _T1 _T2 ]
  Use-Def Chain : 
    (_T28, 16): [2]
    (_T34, 16): [15]
    (_T27, 17): [1]
    (_T35, 17): [16]
    (_T36, 18): [17]
    (_T28, 20): [2]
    (_T38, 20): [19]
    (_T27, 21): [1]
    (_T39, 21): [20]
    (_T2, 22): []
    (_T40, 22): [21]
    (_T1, 23): []
    (_T1, 24): []
    (_T42, 26): [24]
    (_T43, 26): [25]
    (_T1, 27): []
    (_T44, 27): [26]

    15: _T34 = 4    [ _T1 _T2 _T34 _T27 _T28 ]
    16: _T35 = (_T28 * _T34)    [ _T1 _T2 _T35 _T27 _T28 ]
    17: _T36 = (_T27 + _T35)    [ _T1 _T2 _T36 _T27 _T28 ]
    18: _T37 = *(_T36 + 0)    [ _T1 _T2 _T27 _T28 ]
    19: _T38 = 4    [ _T1 _T2 _T38 _T27 _T28 ]
    20: _T39 = (_T28 * _T38)    [ _T1 _T2 _T39 _T27 ]
    21: _T40 = (_T27 + _T39)    [ _T1 _T2 _T40 ]
    22: *(_T40 + 0) = _T2    [ _T1 _T2 ]
    23: _T41 = *(_T1 + 4)    [ _T1 _T2 ]
    24: _T42 = *(_T1 + 4)    [ _T1 _T2 _T42 ]
    25: _T43 = 1    [ _T1 _T2 _T42 _T43 ]
    26: _T44 = (_T42 + _T43)    [ _T1 _T2 _T44 ]
    27: *(_T1 + 4) = _T44    [ _T1 _T2 ]
    28: END BY RETURN, void result

FUNCTION _Stack.Pop : 
BASIC BLOCK 0 : 
  Def     = [ _T46 _T47 _T48 _T49 _T50 _T51 ]
  liveUse = [ _T3 ]
  liveIn  = [ _T3 ]
  liveOut = [ _T3 _T46 _T49 ]
  Use-Def Chain : 
    (_T3, 1): []
    (_T3, 2): []
    (_T47, 4): [2]
    (_T48, 4): [3]
    (_T46, 5): [1]
    (_T49, 6): [4]
    (_T50, 6): [5]
    (_T51, 7): [6]

    1: _T46 = *(_T3 + 8)    [ _T3 _T46 ]
    2: _T47 = *(_T3 + 4)    [ _T3 _T46 _T47 ]
    3: _T48 = 1    [ _T48 _T3 _T46 _T47 ]
    4: _T49 = (_T47 - _T48)    [ _T49 _T3 _T46 ]
    5: _T50 = *(_T46 - 4)    [ _T49 _T50 _T3 _T46 ]
    6: _T51 = (_T49 < _T50)    [ _T49 _T3 _T51 _T46 ]
    7: END BY BEQZ, if _T51 = 0 : goto 2; 1 : goto 1
BASIC BLOCK 1 : 
  Def     = [ _T52 _T53 ]
  liveUse = [ _T49 ]
  liveIn  = [ _T3 _T46 _T49 ]
  liveOut = [ _T3 _T46 _T49 ]
  Use-Def Chain : 
    (_T49, 9): [4]
    (_T52, 9): [8]
    (_T53, 10): [9]

    8: _T52 = 0    [ _T49 _T3 _T52 _T46 ]
    9: _T53 = (_T49 < _T52)    [ _T49 _T3 _T53 _T46 ]
    10: END BY BEQZ, if _T53 = 0 : goto 3; 1 : goto 2
BASIC BLOCK 2 : 
  Def     = [ _T54 ]
  liveUse = [ ]
  liveIn  = [ _T3 _T46 _T49 ]
  liveOut = [ _T3 _T46 _T49 ]
  Use-Def Chain : 
    (_T54, 13): [12]

    12: _T54 = "Decaf runtime error: Array subscript out of bounds\n"    [ _T49 _T3 _T54 _T46 ]
    13: parm _T54    [ _T49 _T3 _T46 ]
    14: call _PrintString    [ _T49 _T3 _T46 ]
    15: call _Halt    [ _T49 _T3 _T46 ]
    16: END BY BRANCH, goto 3
BASIC BLOCK 3 : 
  Def     = [ _T45 _T55 _T56 _T57 _T58 _T59 _T60 _T61 _T62 ]
  liveUse = [ _T3 _T46 _T49 ]
  liveIn  = [ _T3 _T46 _T49 ]
  liveOut = [ _T3 ]
  Use-Def Chain : 
    (_T49, 18): [4]
    (_T55, 18): [17]
    (_T46, 19): [1]
    (_T56, 19): [18]
    (_T57, 20): [19]
    (_T58, 21): [20]
    (_T3, 22): []
    (_T3, 23): []
    (_T60, 25): [23]
    (_T61, 25): [24]
    (_T3, 26): []
    (_T62, 26): [25]
    (_T45, 27): [21]

    17: _T55 = 4    [ _T49 _T3 _T55 _T46 ]
    18: _T56 = (_T49 * _T55)    [ _T3 _T56 _T46 ]
    19: _T57 = (_T46 + _T56)    [ _T3 _T57 ]
    20: _T58 = *(_T57 + 0)    [ _T3 _T58 ]
    21: _T45 = _T58    [ _T3 _T45 ]
    22: _T59 = *(_T3 + 4)    [ _T3 _T45 ]
    23: _T60 = *(_T3 + 4)    [ _T3 _T60 _T45 ]
    24: _T61 = 1    [ _T3 _T60 _T45 _T61 ]
    25: _T62 = (_T60 - _T61)    [ _T3 _T45 _T62 ]
    26: *(_T3 + 4) = _T62    [ _T3 _T45 ]
    27: END BY RETURN, result = _T45

FUNCTION _Stack.NumElems : 
BASIC BLOCK 0 : 
  Def     = [ _T63 ]
  liveUse = [ _T4 ]
  liveIn  = [ _T4 ]
  liveOut = [ _T4 ]
  Use-Def Chain : 
    (_T4, 1): []
    (_T63, 2): [1]

    1: _T63 = *(_T4 + 4)    [ _T4 _T63 ]
    2: END BY RETURN, result = _T63

FUNCTION _Stack.main : 
BASIC BLOCK 0 : 
  Def     = [ _T64 _T65 _T66 _T67 _T68 _T69 _T70 _T71 _T72 _T73 _T74 _T75 _T76 _T77 _T78 _T79 _T80 _T81 _T82 _T83 _T84 _T85 _T86 _T87 _T88 _T89 _T90 _T91 _T92 _T93 _T94 _T95 ]
  liveUse = [ ]
  liveIn  = [ ]
  liveOut = [ ]
  Use-Def Chain : 
    (_T65, 2): [1]
    (_T64, 3): [2]
    (_T64, 4): [2]
    (_T66, 5): [4]
    (_T67, 6): [5]
    (_T64, 8): [2]
    (_T68, 9): [7]
    (_T64, 10): [2]
    (_T69, 11): [10]
    (_T70, 12): [11]
    (_T64, 14): [2]
    (_T71, 15): [13]
    (_T64, 16): [2]
    (_T72, 17): [16]
    (_T73, 18): [17]
    (_T64, 20): [2]
    (_T74, 21): [19]
    (_T64, 22): [2]
    (_T75, 23): [22]
    (_T76, 24): [23]
    (_T64, 25): [2]
    (_T64, 26): [2]
    (_T77, 27): [26]
    (_T78, 28): [27]
    (_T79, 29): [28]
    (_T80, 32): [31]
    (_T64, 34): [2]
    (_T64, 35): [2]
    (_T81, 36): [35]
    (_T82, 37): [36]
    (_T83, 38): [37]
    (_T84, 41): [40]
    (_T64, 43): [2]
    (_T64, 44): [2]
    (_T85, 45): [44]
    (_T86, 46): [45]
    (_T87, 47): [46]
    (_T88, 50): [49]
    (_T64, 52): [2]
    (_T64, 53): [2]
    (_T89, 54): [53]
    (_T90, 55): [54]
    (_T91, 56): [55]
    (_T92, 59): [58]
    (_T64, 61): [2]
    (_T64, 62): [2]
    (_T93, 63): [62]
    (_T94, 64): [63]
    (_T95, 65): [64]

    1: _T65 =  call _Stack_New    [ _T65 ]
    2: _T64 = _T65    [ _T64 ]
    3: parm _T64    [ _T64 ]
    4: _T66 = *(_T64 + 0)    [ _T64 _T66 ]
    5: _T67 = *(_T66 + 8)    [ _T64 _T67 ]
    6: call _T67    [ _T64 ]
    7: _T68 = 3    [ _T64 _T68 ]
    8: parm _T64    [ _T64 _T68 ]
    9: parm _T68    [ _T64 ]
    10: _T69 = *(_T64 + 0)    [ _T64 _T69 ]
    11: _T70 = *(_T69 + 12)    [ _T64 _T70 ]
    12: call _T70    [ _T64 ]
    13: _T71 = 7    [ _T64 _T71 ]
    14: parm _T64    [ _T64 _T71 ]
    15: parm _T71    [ _T64 ]
    16: _T72 = *(_T64 + 0)    [ _T64 _T72 ]
    17: _T73 = *(_T72 + 12)    [ _T64 _T73 ]
    18: call _T73    [ _T64 ]
    19: _T74 = 4    [ _T64 _T74 ]
    20: parm _T64    [ _T64 _T74 ]
    21: parm _T74    [ _T64 ]
    22: _T75 = *(_T64 + 0)    [ _T64 _T75 ]
    23: _T76 = *(_T75 + 12)    [ _T64 _T76 ]
    24: call _T76    [ _T64 ]
    25: parm _T64    [ _T64 ]
    26: _T77 = *(_T64 + 0)    [ _T64 _T77 ]
    27: _T78 = *(_T77 + 20)    [ _T64 _T78 ]
    28: _T79 =  call _T78    [ _T64 _T79 ]
    29: parm _T79    [ _T64 ]
    30: call _PrintInt    [ _T64 ]
    31: _T80 = " "    [ _T64 _T80 ]
    32: parm _T80    [ _T64 ]
    33: call _PrintString    [ _T64 ]
    34: parm _T64    [ _T64 ]
    35: _T81 = *(_T64 + 0)    [ _T64 _T81 ]
    36: _T82 = *(_T81 + 16)    [ _T64 _T82 ]
    37: _T83 =  call _T82    [ _T64 _T83 ]
    38: parm _T83    [ _T64 ]
    39: call _PrintInt    [ _T64 ]
    40: _T84 = " "    [ _T64 _T84 ]
    41: parm _T84    [ _T64 ]
    42: call _PrintString    [ _T64 ]
    43: parm _T64    [ _T64 ]
    44: _T85 = *(_T64 + 0)    [ _T64 _T85 ]
    45: _T86 = *(_T85 + 16)    [ _T64 _T86 ]
    46: _T87 =  call _T86    [ _T64 _T87 ]
    47: parm _T87    [ _T64 ]
    48: call _PrintInt    [ _T64 ]
    49: _T88 = " "    [ _T64 _T88 ]
    50: parm _T88    [ _T64 ]
    51: call _PrintString    [ _T64 ]
    52: parm _T64    [ _T64 ]
    53: _T89 = *(_T64 + 0)    [ _T64 _T89 ]
    54: _T90 = *(_T89 + 16)    [ _T64 _T90 ]
    55: _T91 =  call _T90    [ _T64 _T91 ]
    56: parm _T91    [ _T64 ]
    57: call _PrintInt    [ _T64 ]
    58: _T92 = " "    [ _T64 _T92 ]
    59: parm _T92    [ _T64 ]
    60: call _PrintString    [ _T64 ]
    61: parm _T64    [ _T64 ]
    62: _T93 = *(_T64 + 0)    [ _T93 ]
    63: _T94 = *(_T93 + 20)    [ _T94 ]
    64: _T95 =  call _T94    [ _T95 ]
    65: parm _T95    [ ]
    66: call _PrintInt    [ ]
    67: END BY RETURN, void result

FUNCTION main : 
BASIC BLOCK 0 : 
  Def     = [ ]
  liveUse = [ ]
  liveIn  = [ ]
  liveOut = [ ]
  Use-Def Chain : 

    1: call _Stack.main    [ ]
    2: END BY RETURN, void result

