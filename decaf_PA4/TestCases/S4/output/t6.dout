FUNCTION _Main_New : 
BASIC BLOCK 0 : 
  Def     = [ _T3 _T4 _T5 ]
  liveUse = [ ]
  liveIn  = [ ]
  liveOut = [ ]
  Use-Def Chain : 
    (_T3, 2): [1]
    (_T4, 5): [3]
    (_T5, 5): [4]
    (_T4, 6): [3]

    1: _T3 = 4    [ _T3 ]
    2: parm _T3    [ ]
    3: _T4 =  call _Alloc    [ _T4 ]
    4: _T5 = VTBL <_Main>    [ _T4 _T5 ]
    5: *(_T4 + 0) = _T5    [ _T4 ]
    6: END BY RETURN, result = _T4

FUNCTION _Main.Binky : 
BASIC BLOCK 0 : 
  Def     = [ _T6 _T7 _T8 ]
  liveUse = [ _T2 ]
  liveIn  = [ _T1 _T2 ]
  liveOut = [ _T1 _T2 _T6 ]
  Use-Def Chain : 
    (_T2, 2): []
    (_T6, 3): [1]
    (_T7, 3): [2]
    (_T8, 4): [3]

    1: _T6 = 0    [ _T1 _T2 _T6 ]
    2: _T7 = *(_T2 - 4)    [ _T1 _T2 _T6 _T7 ]
    3: _T8 = (_T6 < _T7)    [ _T1 _T2 _T6 _T8 ]
    4: END BY BEQZ, if _T8 = 0 : goto 2; 1 : goto 1
BASIC BLOCK 1 : 
  Def     = [ _T9 _T10 ]
  liveUse = [ _T6 ]
  liveIn  = [ _T1 _T2 _T6 ]
  liveOut = [ _T1 _T2 _T6 ]
  Use-Def Chain : 
    (_T6, 6): [1]
    (_T9, 6): [5]
    (_T10, 7): [6]

    5: _T9 = 0    [ _T1 _T2 _T6 _T9 ]
    6: _T10 = (_T6 < _T9)    [ _T1 _T2 _T6 _T10 ]
    7: END BY BEQZ, if _T10 = 0 : goto 3; 1 : goto 2
BASIC BLOCK 2 : 
  Def     = [ _T11 ]
  liveUse = [ ]
  liveIn  = [ _T1 _T2 _T6 ]
  liveOut = [ _T1 _T2 _T6 ]
  Use-Def Chain : 
    (_T11, 10): [9]

    9: _T11 = "Decaf runtime error: Array subscript out of bounds\n"    [ _T1 _T2 _T6 _T11 ]
    10: parm _T11    [ _T1 _T2 _T6 ]
    11: call _PrintString    [ _T1 _T2 _T6 ]
    12: call _Halt    [ _T1 _T2 _T6 ]
    13: END BY BRANCH, goto 3
BASIC BLOCK 3 : 
  Def     = [ _T12 _T13 _T14 _T15 _T16 _T17 ]
  liveUse = [ _T1 _T2 _T6 ]
  liveIn  = [ _T1 _T2 _T6 ]
  liveOut = [ _T1 _T2 _T15 ]
  Use-Def Chain : 
    (_T6, 15): [1]
    (_T12, 15): [14]
    (_T2, 16): []
    (_T13, 16): [15]
    (_T14, 17): [16]
    (_T1, 18): []
    (_T15, 19): [17]
    (_T16, 19): [18]
    (_T17, 20): [19]

    14: _T12 = 4    [ _T1 _T2 _T6 _T12 ]
    15: _T13 = (_T6 * _T12)    [ _T1 _T2 _T13 ]
    16: _T14 = (_T2 + _T13)    [ _T1 _T2 _T14 ]
    17: _T15 = *(_T14 + 0)    [ _T1 _T2 _T15 ]
    18: _T16 = *(_T1 - 4)    [ _T16 _T1 _T2 _T15 ]
    19: _T17 = (_T15 < _T16)    [ _T1 _T17 _T2 _T15 ]
    20: END BY BEQZ, if _T17 = 0 : goto 5; 1 : goto 4
BASIC BLOCK 4 : 
  Def     = [ _T18 _T19 ]
  liveUse = [ _T15 ]
  liveIn  = [ _T1 _T2 _T15 ]
  liveOut = [ _T1 _T2 _T15 ]
  Use-Def Chain : 
    (_T15, 22): [17]
    (_T18, 22): [21]
    (_T19, 23): [22]

    21: _T18 = 0    [ _T1 _T2 _T18 _T15 ]
    22: _T19 = (_T15 < _T18)    [ _T1 _T2 _T19 _T15 ]
    23: END BY BEQZ, if _T19 = 0 : goto 6; 1 : goto 5
BASIC BLOCK 5 : 
  Def     = [ _T20 ]
  liveUse = [ ]
  liveIn  = [ _T1 _T2 _T15 ]
  liveOut = [ _T1 _T2 _T15 ]
  Use-Def Chain : 
    (_T20, 26): [25]

    25: _T20 = "Decaf runtime error: Array subscript out of bounds\n"    [ _T1 _T2 _T20 _T15 ]
    26: parm _T20    [ _T1 _T2 _T15 ]
    27: call _PrintString    [ _T1 _T2 _T15 ]
    28: call _Halt    [ _T1 _T2 _T15 ]
    29: END BY BRANCH, goto 6
BASIC BLOCK 6 : 
  Def     = [ _T21 _T22 _T23 _T24 ]
  liveUse = [ _T1 _T15 ]
  liveIn  = [ _T1 _T2 _T15 ]
  liveOut = [ _T1 _T2 ]
  Use-Def Chain : 
    (_T15, 31): [17]
    (_T21, 31): [30]
    (_T1, 32): []
    (_T22, 32): [31]
    (_T23, 33): [32]
    (_T24, 34): [33]

    30: _T21 = 4    [ _T1 _T2 _T21 _T15 ]
    31: _T22 = (_T15 * _T21)    [ _T1 _T2 _T22 ]
    32: _T23 = (_T1 + _T22)    [ _T1 _T2 _T23 ]
    33: _T24 = *(_T23 + 0)    [ _T1 _T2 _T24 ]
    34: END BY RETURN, result = _T24

FUNCTION main : 
BASIC BLOCK 0 : 
  Def     = [ _T27 _T28 _T29 ]
  liveUse = [ ]
  liveIn  = [ ]
  liveOut = [ _T27 ]
  Use-Def Chain : 
    (_T27, 3): [1]
    (_T28, 3): [2]
    (_T29, 4): [3]

    1: _T27 = 5    [ _T27 ]
    2: _T28 = 0    [ _T27 _T28 ]
    3: _T29 = (_T27 < _T28)    [ _T27 _T29 ]
    4: END BY BEQZ, if _T29 = 0 : goto 2; 1 : goto 1
BASIC BLOCK 1 : 
  Def     = [ _T30 ]
  liveUse = [ ]
  liveIn  = [ _T27 ]
  liveOut = [ _T27 ]
  Use-Def Chain : 
    (_T30, 6): [5]

    5: _T30 = "Decaf runtime error: Cannot create negative-sized array\n"    [ _T27 _T30 ]
    6: parm _T30    [ _T27 ]
    7: call _PrintString    [ _T27 ]
    8: call _Halt    [ _T27 ]
    9: END BY BRANCH, goto 2
BASIC BLOCK 2 : 
  Def     = [ _T31 _T32 _T33 _T34 _T35 ]
  liveUse = [ _T27 ]
  liveIn  = [ _T27 ]
  liveOut = [ _T31 _T33 _T34 _T35 ]
  Use-Def Chain : 
    (_T27, 11): [1]
    (_T31, 11): [10]
    (_T31, 12): [10]
    (_T32, 12): [11]
    (_T33, 13): [12]
    (_T27, 15): [1]
    (_T34, 15): [14]
    (_T33, 17): [12]
    (_T34, 17): [14]

    10: _T31 = 4    [ _T27 _T31 ]
    11: _T32 = (_T31 * _T27)    [ _T32 _T27 _T31 ]
    12: _T33 = (_T31 + _T32)    [ _T33 _T27 _T31 ]
    13: parm _T33    [ _T33 _T27 _T31 ]
    14: _T34 =  call _Alloc    [ _T33 _T34 _T27 _T31 ]
    15: *(_T34 + 0) = _T27    [ _T33 _T34 _T31 ]
    16: _T35 = 0    [ _T33 _T34 _T35 _T31 ]
    17: _T34 = (_T34 + _T33)    [ _T33 _T34 _T35 _T31 ]
    18: END BY BRANCH, goto 3
BASIC BLOCK 3 : 
  Def     = [ ]
  liveUse = [ _T31 _T33 ]
  liveIn  = [ _T31 _T33 _T34 _T35 ]
  liveOut = [ _T31 _T33 _T34 _T35 ]
  Use-Def Chain : 
    (_T31, 19): [10]
    (_T33, 19): [12, 19]
    (_T33, 20): [19]

    19: _T33 = (_T33 - _T31)    [ _T33 _T34 _T35 _T31 ]
    20: END BY BEQZ, if _T33 = 0 : goto 5; 1 : goto 4
BASIC BLOCK 4 : 
  Def     = [ ]
  liveUse = [ _T31 _T34 _T35 ]
  liveIn  = [ _T31 _T33 _T34 _T35 ]
  liveOut = [ _T31 _T33 _T34 _T35 ]
  Use-Def Chain : 
    (_T31, 21): [10]
    (_T34, 21): [17, 21]
    (_T34, 22): [21]
    (_T35, 22): [16]

    21: _T34 = (_T34 - _T31)    [ _T33 _T34 _T35 _T31 ]
    22: *(_T34 + 0) = _T35    [ _T33 _T34 _T35 _T31 ]
    23: END BY BRANCH, goto 3
BASIC BLOCK 5 : 
  Def     = [ _T26 _T36 _T37 _T38 ]
  liveUse = [ _T34 ]
  liveIn  = [ _T34 ]
  liveOut = [ _T26 _T36 ]
  Use-Def Chain : 
    (_T34, 25): [17, 21]
    (_T26, 27): [25]
    (_T36, 28): [26]
    (_T37, 28): [27]
    (_T38, 29): [28]

    25: _T26 = _T34    [ _T26 ]
    26: _T36 = 0    [ _T36 _T26 ]
    27: _T37 = *(_T26 - 4)    [ _T36 _T37 _T26 ]
    28: _T38 = (_T36 < _T37)    [ _T36 _T38 _T26 ]
    29: END BY BEQZ, if _T38 = 0 : goto 7; 1 : goto 6
BASIC BLOCK 6 : 
  Def     = [ _T39 _T40 ]
  liveUse = [ _T36 ]
  liveIn  = [ _T26 _T36 ]
  liveOut = [ _T26 _T36 ]
  Use-Def Chain : 
    (_T36, 31): [26]
    (_T39, 31): [30]
    (_T40, 32): [31]

    30: _T39 = 0    [ _T36 _T39 _T26 ]
    31: _T40 = (_T36 < _T39)    [ _T36 _T40 _T26 ]
    32: END BY BEQZ, if _T40 = 0 : goto 8; 1 : goto 7
BASIC BLOCK 7 : 
  Def     = [ _T41 ]
  liveUse = [ ]
  liveIn  = [ _T26 _T36 ]
  liveOut = [ _T26 _T36 ]
  Use-Def Chain : 
    (_T41, 35): [34]

    34: _T41 = "Decaf runtime error: Array subscript out of bounds\n"    [ _T36 _T41 _T26 ]
    35: parm _T41    [ _T36 _T26 ]
    36: call _PrintString    [ _T36 _T26 ]
    37: call _Halt    [ _T36 _T26 ]
    38: END BY BRANCH, goto 8
BASIC BLOCK 8 : 
  Def     = [ _T42 _T43 _T44 _T45 _T46 _T47 _T48 ]
  liveUse = [ _T26 _T36 ]
  liveIn  = [ _T26 _T36 ]
  liveOut = [ _T26 _T36 _T46 ]
  Use-Def Chain : 
    (_T36, 40): [26]
    (_T42, 40): [39]
    (_T26, 41): [25]
    (_T43, 41): [40]
    (_T44, 42): [41]
    (_T46, 45): [43]
    (_T47, 45): [44]
    (_T48, 46): [45]

    39: _T42 = 4    [ _T36 _T26 _T42 ]
    40: _T43 = (_T36 * _T42)    [ _T36 _T26 _T43 ]
    41: _T44 = (_T26 + _T43)    [ _T36 _T26 _T44 ]
    42: _T45 = *(_T44 + 0)    [ _T36 _T26 ]
    43: _T46 = 12    [ _T36 _T26 _T46 ]
    44: _T47 = 0    [ _T36 _T26 _T46 _T47 ]
    45: _T48 = (_T46 < _T47)    [ _T48 _T36 _T26 _T46 ]
    46: END BY BEQZ, if _T48 = 0 : goto 10; 1 : goto 9
BASIC BLOCK 9 : 
  Def     = [ _T49 ]
  liveUse = [ ]
  liveIn  = [ _T26 _T36 _T46 ]
  liveOut = [ _T26 _T36 _T46 ]
  Use-Def Chain : 
    (_T49, 48): [47]

    47: _T49 = "Decaf runtime error: Cannot create negative-sized array\n"    [ _T49 _T36 _T26 _T46 ]
    48: parm _T49    [ _T36 _T26 _T46 ]
    49: call _PrintString    [ _T36 _T26 _T46 ]
    50: call _Halt    [ _T36 _T26 _T46 ]
    51: END BY BRANCH, goto 10
BASIC BLOCK 10 : 
  Def     = [ _T50 _T51 _T52 _T53 _T54 ]
  liveUse = [ _T46 ]
  liveIn  = [ _T26 _T36 _T46 ]
  liveOut = [ _T26 _T36 _T50 _T52 _T53 _T54 ]
  Use-Def Chain : 
    (_T46, 53): [43]
    (_T50, 53): [52]
    (_T50, 54): [52]
    (_T51, 54): [53]
    (_T52, 55): [54]
    (_T46, 57): [43]
    (_T53, 57): [56]
    (_T52, 59): [54]
    (_T53, 59): [56]

    52: _T50 = 4    [ _T50 _T36 _T26 _T46 ]
    53: _T51 = (_T50 * _T46)    [ _T50 _T51 _T36 _T26 _T46 ]
    54: _T52 = (_T50 + _T51)    [ _T50 _T36 _T52 _T26 _T46 ]
    55: parm _T52    [ _T50 _T36 _T52 _T26 _T46 ]
    56: _T53 =  call _Alloc    [ _T50 _T36 _T52 _T53 _T26 _T46 ]
    57: *(_T53 + 0) = _T46    [ _T50 _T36 _T52 _T53 _T26 ]
    58: _T54 = 0    [ _T50 _T36 _T52 _T53 _T54 _T26 ]
    59: _T53 = (_T53 + _T52)    [ _T50 _T36 _T52 _T53 _T54 _T26 ]
    60: END BY BRANCH, goto 11
BASIC BLOCK 11 : 
  Def     = [ ]
  liveUse = [ _T50 _T52 ]
  liveIn  = [ _T26 _T36 _T50 _T52 _T53 _T54 ]
  liveOut = [ _T26 _T36 _T50 _T52 _T53 _T54 ]
  Use-Def Chain : 
    (_T50, 61): [52]
    (_T52, 61): [54, 61]
    (_T52, 62): [61]

    61: _T52 = (_T52 - _T50)    [ _T50 _T36 _T52 _T53 _T54 _T26 ]
    62: END BY BEQZ, if _T52 = 0 : goto 13; 1 : goto 12
BASIC BLOCK 12 : 
  Def     = [ ]
  liveUse = [ _T50 _T53 _T54 ]
  liveIn  = [ _T26 _T36 _T50 _T52 _T53 _T54 ]
  liveOut = [ _T26 _T36 _T50 _T52 _T53 _T54 ]
  Use-Def Chain : 
    (_T50, 63): [52]
    (_T53, 63): [59, 63]
    (_T53, 64): [63]
    (_T54, 64): [58]

    63: _T53 = (_T53 - _T50)    [ _T50 _T36 _T52 _T53 _T54 _T26 ]
    64: *(_T53 + 0) = _T54    [ _T50 _T36 _T52 _T53 _T54 _T26 ]
    65: END BY BRANCH, goto 11
BASIC BLOCK 13 : 
  Def     = [ _T55 _T56 _T57 _T58 _T59 _T60 ]
  liveUse = [ _T26 _T36 _T53 ]
  liveIn  = [ _T26 _T36 _T53 ]
  liveOut = [ _T26 _T58 ]
  Use-Def Chain : 
    (_T36, 68): [26]
    (_T55, 68): [67]
    (_T26, 69): [25]
    (_T56, 69): [68]
    (_T53, 70): [59, 63]
    (_T57, 70): [69]
    (_T58, 73): [71]
    (_T59, 73): [72]
    (_T60, 74): [73]

    67: _T55 = 4    [ _T36 _T53 _T55 _T26 ]
    68: _T56 = (_T36 * _T55)    [ _T53 _T56 _T26 ]
    69: _T57 = (_T26 + _T56)    [ _T53 _T57 _T26 ]
    70: *(_T57 + 0) = _T53    [ _T26 ]
    71: _T58 = 10    [ _T26 _T58 ]
    72: _T59 = 0    [ _T26 _T58 _T59 ]
    73: _T60 = (_T58 < _T59)    [ _T26 _T58 _T60 ]
    74: END BY BEQZ, if _T60 = 0 : goto 15; 1 : goto 14
BASIC BLOCK 14 : 
  Def     = [ _T61 ]
  liveUse = [ ]
  liveIn  = [ _T26 _T58 ]
  liveOut = [ _T26 _T58 ]
  Use-Def Chain : 
    (_T61, 76): [75]

    75: _T61 = "Decaf runtime error: Cannot create negative-sized array\n"    [ _T26 _T58 _T61 ]
    76: parm _T61    [ _T26 _T58 ]
    77: call _PrintString    [ _T26 _T58 ]
    78: call _Halt    [ _T26 _T58 ]
    79: END BY BRANCH, goto 15
BASIC BLOCK 15 : 
  Def     = [ _T62 _T63 _T64 _T65 _T66 ]
  liveUse = [ _T58 ]
  liveIn  = [ _T26 _T58 ]
  liveOut = [ _T26 _T62 _T64 _T65 _T66 ]
  Use-Def Chain : 
    (_T58, 81): [71]
    (_T62, 81): [80]
    (_T62, 82): [80]
    (_T63, 82): [81]
    (_T64, 83): [82]
    (_T58, 85): [71]
    (_T65, 85): [84]
    (_T64, 87): [82]
    (_T65, 87): [84]

    80: _T62 = 4    [ _T26 _T58 _T62 ]
    81: _T63 = (_T62 * _T58)    [ _T26 _T58 _T62 _T63 ]
    82: _T64 = (_T62 + _T63)    [ _T64 _T26 _T58 _T62 ]
    83: parm _T64    [ _T64 _T26 _T58 _T62 ]
    84: _T65 =  call _Alloc    [ _T64 _T65 _T26 _T58 _T62 ]
    85: *(_T65 + 0) = _T58    [ _T64 _T65 _T26 _T62 ]
    86: _T66 = 0    [ _T64 _T65 _T66 _T26 _T62 ]
    87: _T65 = (_T65 + _T64)    [ _T64 _T65 _T66 _T26 _T62 ]
    88: END BY BRANCH, goto 16
BASIC BLOCK 16 : 
  Def     = [ ]
  liveUse = [ _T62 _T64 ]
  liveIn  = [ _T26 _T62 _T64 _T65 _T66 ]
  liveOut = [ _T26 _T62 _T64 _T65 _T66 ]
  Use-Def Chain : 
    (_T62, 89): [80]
    (_T64, 89): [82, 89]
    (_T64, 90): [89]

    89: _T64 = (_T64 - _T62)    [ _T64 _T65 _T66 _T26 _T62 ]
    90: END BY BEQZ, if _T64 = 0 : goto 18; 1 : goto 17
BASIC BLOCK 17 : 
  Def     = [ ]
  liveUse = [ _T62 _T65 _T66 ]
  liveIn  = [ _T26 _T62 _T64 _T65 _T66 ]
  liveOut = [ _T26 _T62 _T64 _T65 _T66 ]
  Use-Def Chain : 
    (_T62, 91): [80]
    (_T65, 91): [87, 91]
    (_T65, 92): [91]
    (_T66, 92): [86]

    91: _T65 = (_T65 - _T62)    [ _T64 _T65 _T66 _T26 _T62 ]
    92: *(_T65 + 0) = _T66    [ _T64 _T65 _T66 _T26 _T62 ]
    93: END BY BRANCH, goto 16
BASIC BLOCK 18 : 
  Def     = [ _T25 _T67 _T68 _T69 ]
  liveUse = [ _T65 ]
  liveIn  = [ _T26 _T65 ]
  liveOut = [ _T25 _T26 _T67 ]
  Use-Def Chain : 
    (_T65, 95): [87, 91]
    (_T25, 97): [95]
    (_T67, 98): [96]
    (_T68, 98): [97]
    (_T69, 99): [98]

    95: _T25 = _T65    [ _T25 _T26 ]
    96: _T67 = 0    [ _T67 _T25 _T26 ]
    97: _T68 = *(_T25 - 4)    [ _T67 _T68 _T25 _T26 ]
    98: _T69 = (_T67 < _T68)    [ _T67 _T69 _T25 _T26 ]
    99: END BY BEQZ, if _T69 = 0 : goto 20; 1 : goto 19
BASIC BLOCK 19 : 
  Def     = [ _T70 _T71 ]
  liveUse = [ _T67 ]
  liveIn  = [ _T25 _T26 _T67 ]
  liveOut = [ _T25 _T26 _T67 ]
  Use-Def Chain : 
    (_T67, 101): [96]
    (_T70, 101): [100]
    (_T71, 102): [101]

    100: _T70 = 0    [ _T67 _T70 _T25 _T26 ]
    101: _T71 = (_T67 < _T70)    [ _T67 _T71 _T25 _T26 ]
    102: END BY BEQZ, if _T71 = 0 : goto 21; 1 : goto 20
BASIC BLOCK 20 : 
  Def     = [ _T72 ]
  liveUse = [ ]
  liveIn  = [ _T25 _T26 _T67 ]
  liveOut = [ _T25 _T26 _T67 ]
  Use-Def Chain : 
    (_T72, 105): [104]

    104: _T72 = "Decaf runtime error: Array subscript out of bounds\n"    [ _T67 _T72 _T25 _T26 ]
    105: parm _T72    [ _T67 _T25 _T26 ]
    106: call _PrintString    [ _T67 _T25 _T26 ]
    107: call _Halt    [ _T67 _T25 _T26 ]
    108: END BY BRANCH, goto 21
BASIC BLOCK 21 : 
  Def     = [ _T73 _T74 _T75 _T76 _T77 _T78 _T79 _T80 _T81 _T82 _T83 _T84 _T85 _T86 _T87 _T88 _T89 _T90 _T91 ]
  liveUse = [ _T25 _T26 _T67 ]
  liveIn  = [ _T25 _T26 _T67 ]
  liveOut = [ _T25 _T26 _T89 ]
  Use-Def Chain : 
    (_T67, 110): [96]
    (_T73, 110): [109]
    (_T25, 111): [95]
    (_T74, 111): [110]
    (_T75, 112): [111]
    (_T78, 116): [114]
    (_T79, 116): [115]
    (_T80, 118): [116]
    (_T81, 118): [117]
    (_T82, 120): [118]
    (_T83, 120): [119]
    (_T77, 121): [113]
    (_T84, 121): [120]
    (_T67, 123): [96]
    (_T86, 123): [122]
    (_T25, 124): [95]
    (_T87, 124): [123]
    (_T85, 125): [121]
    (_T88, 125): [124]
    (_T26, 127): [25]
    (_T89, 128): [126]
    (_T90, 128): [127]
    (_T91, 129): [128]

    109: _T73 = 4    [ _T67 _T25 _T73 _T26 ]
    110: _T74 = (_T67 * _T73)    [ _T67 _T25 _T26 _T74 ]
    111: _T75 = (_T25 + _T74)    [ _T67 _T25 _T26 _T75 ]
    112: _T76 = *(_T75 + 0)    [ _T67 _T25 _T26 ]
    113: _T77 = 4    [ _T67 _T25 _T26 _T77 ]
    114: _T78 = 5    [ _T67 _T25 _T26 _T77 _T78 ]
    115: _T79 = 3    [ _T67 _T25 _T26 _T77 _T78 _T79 ]
    116: _T80 = (_T78 * _T79)    [ _T80 _T67 _T25 _T26 _T77 ]
    117: _T81 = 4    [ _T80 _T81 _T67 _T25 _T26 _T77 ]
    118: _T82 = (_T80 / _T81)    [ _T82 _T67 _T25 _T26 _T77 ]
    119: _T83 = 2    [ _T82 _T67 _T83 _T25 _T26 _T77 ]
    120: _T84 = (_T82 % _T83)    [ _T67 _T84 _T25 _T26 _T77 ]
    121: _T85 = (_T77 + _T84)    [ _T67 _T85 _T25 _T26 ]
    122: _T86 = 4    [ _T67 _T85 _T86 _T25 _T26 ]
    123: _T87 = (_T67 * _T86)    [ _T85 _T87 _T25 _T26 ]
    124: _T88 = (_T25 + _T87)    [ _T85 _T88 _T25 _T26 ]
    125: *(_T88 + 0) = _T85    [ _T25 _T26 ]
    126: _T89 = 0    [ _T25 _T89 _T26 ]
    127: _T90 = *(_T26 - 4)    [ _T25 _T89 _T26 _T90 ]
    128: _T91 = (_T89 < _T90)    [ _T25 _T89 _T26 _T91 ]
    129: END BY BEQZ, if _T91 = 0 : goto 23; 1 : goto 22
BASIC BLOCK 22 : 
  Def     = [ _T92 _T93 ]
  liveUse = [ _T89 ]
  liveIn  = [ _T25 _T26 _T89 ]
  liveOut = [ _T25 _T26 _T89 ]
  Use-Def Chain : 
    (_T89, 131): [126]
    (_T92, 131): [130]
    (_T93, 132): [131]

    130: _T92 = 0    [ _T25 _T89 _T26 _T92 ]
    131: _T93 = (_T89 < _T92)    [ _T25 _T89 _T26 _T93 ]
    132: END BY BEQZ, if _T93 = 0 : goto 24; 1 : goto 23
BASIC BLOCK 23 : 
  Def     = [ _T94 ]
  liveUse = [ ]
  liveIn  = [ _T25 _T26 _T89 ]
  liveOut = [ _T25 _T26 _T89 ]
  Use-Def Chain : 
    (_T94, 135): [134]

    134: _T94 = "Decaf runtime error: Array subscript out of bounds\n"    [ _T25 _T89 _T26 _T94 ]
    135: parm _T94    [ _T25 _T89 _T26 ]
    136: call _PrintString    [ _T25 _T89 _T26 ]
    137: call _Halt    [ _T25 _T89 _T26 ]
    138: END BY BRANCH, goto 24
BASIC BLOCK 24 : 
  Def     = [ _T95 _T96 _T97 _T98 _T99 _T100 _T101 ]
  liveUse = [ _T25 _T26 _T89 ]
  liveIn  = [ _T25 _T26 _T89 ]
  liveOut = [ _T25 _T26 _T98 _T99 ]
  Use-Def Chain : 
    (_T89, 140): [126]
    (_T95, 140): [139]
    (_T26, 141): [25]
    (_T96, 141): [140]
    (_T97, 142): [141]
    (_T25, 144): [95]
    (_T99, 145): [143]
    (_T100, 145): [144]
    (_T101, 146): [145]

    139: _T95 = 4    [ _T25 _T89 _T26 _T95 ]
    140: _T96 = (_T89 * _T95)    [ _T96 _T25 _T26 ]
    141: _T97 = (_T26 + _T96)    [ _T97 _T25 _T26 ]
    142: _T98 = *(_T97 + 0)    [ _T98 _T25 _T26 ]
    143: _T99 = 0    [ _T98 _T99 _T25 _T26 ]
    144: _T100 = *(_T25 - 4)    [ _T98 _T99 _T100 _T25 _T26 ]
    145: _T101 = (_T99 < _T100)    [ _T98 _T99 _T101 _T25 _T26 ]
    146: END BY BEQZ, if _T101 = 0 : goto 26; 1 : goto 25
BASIC BLOCK 25 : 
  Def     = [ _T102 _T103 ]
  liveUse = [ _T99 ]
  liveIn  = [ _T25 _T26 _T98 _T99 ]
  liveOut = [ _T25 _T26 _T98 _T99 ]
  Use-Def Chain : 
    (_T99, 148): [143]
    (_T102, 148): [147]
    (_T103, 149): [148]

    147: _T102 = 0    [ _T98 _T99 _T102 _T25 _T26 ]
    148: _T103 = (_T99 < _T102)    [ _T98 _T99 _T103 _T25 _T26 ]
    149: END BY BEQZ, if _T103 = 0 : goto 27; 1 : goto 26
BASIC BLOCK 26 : 
  Def     = [ _T104 ]
  liveUse = [ ]
  liveIn  = [ _T25 _T26 _T98 _T99 ]
  liveOut = [ _T25 _T26 _T98 _T99 ]
  Use-Def Chain : 
    (_T104, 152): [151]

    151: _T104 = "Decaf runtime error: Array subscript out of bounds\n"    [ _T98 _T99 _T104 _T25 _T26 ]
    152: parm _T104    [ _T98 _T99 _T25 _T26 ]
    153: call _PrintString    [ _T98 _T99 _T25 _T26 ]
    154: call _Halt    [ _T98 _T99 _T25 _T26 ]
    155: END BY BRANCH, goto 27
BASIC BLOCK 27 : 
  Def     = [ _T105 _T106 _T107 _T108 _T109 _T110 ]
  liveUse = [ _T25 _T98 _T99 ]
  liveIn  = [ _T25 _T26 _T98 _T99 ]
  liveOut = [ _T25 _T26 _T98 _T108 ]
  Use-Def Chain : 
    (_T99, 157): [143]
    (_T105, 157): [156]
    (_T25, 158): [95]
    (_T106, 158): [157]
    (_T107, 159): [158]
    (_T98, 160): [142]
    (_T108, 161): [159]
    (_T109, 161): [160]
    (_T110, 162): [161]

    156: _T105 = 4    [ _T98 _T99 _T25 _T105 _T26 ]
    157: _T106 = (_T99 * _T105)    [ _T98 _T25 _T26 _T106 ]
    158: _T107 = (_T25 + _T106)    [ _T98 _T25 _T26 _T107 ]
    159: _T108 = *(_T107 + 0)    [ _T98 _T25 _T26 _T108 ]
    160: _T109 = *(_T98 - 4)    [ _T98 _T25 _T26 _T108 _T109 ]
    161: _T110 = (_T108 < _T109)    [ _T98 _T25 _T26 _T108 _T110 ]
    162: END BY BEQZ, if _T110 = 0 : goto 29; 1 : goto 28
BASIC BLOCK 28 : 
  Def     = [ _T111 _T112 ]
  liveUse = [ _T108 ]
  liveIn  = [ _T25 _T26 _T98 _T108 ]
  liveOut = [ _T25 _T26 _T98 _T108 ]
  Use-Def Chain : 
    (_T108, 164): [159]
    (_T111, 164): [163]
    (_T112, 165): [164]

    163: _T111 = 0    [ _T98 _T25 _T26 _T108 _T111 ]
    164: _T112 = (_T108 < _T111)    [ _T112 _T98 _T25 _T26 _T108 ]
    165: END BY BEQZ, if _T112 = 0 : goto 30; 1 : goto 29
BASIC BLOCK 29 : 
  Def     = [ _T113 ]
  liveUse = [ ]
  liveIn  = [ _T25 _T26 _T98 _T108 ]
  liveOut = [ _T25 _T26 _T98 _T108 ]
  Use-Def Chain : 
    (_T113, 168): [167]

    167: _T113 = "Decaf runtime error: Array subscript out of bounds\n"    [ _T113 _T98 _T25 _T26 _T108 ]
    168: parm _T113    [ _T98 _T25 _T26 _T108 ]
    169: call _PrintString    [ _T98 _T25 _T26 _T108 ]
    170: call _Halt    [ _T98 _T25 _T26 _T108 ]
    171: END BY BRANCH, goto 30
BASIC BLOCK 30 : 
  Def     = [ _T114 _T115 _T116 _T117 _T118 _T119 _T120 _T121 _T122 _T123 _T124 ]
  liveUse = [ _T25 _T98 _T108 ]
  liveIn  = [ _T25 _T26 _T98 _T108 ]
  liveOut = [ _T25 _T26 _T122 ]
  Use-Def Chain : 
    (_T108, 173): [159]
    (_T114, 173): [172]
    (_T98, 174): [142]
    (_T115, 174): [173]
    (_T116, 175): [174]
    (_T108, 178): [159]
    (_T119, 178): [177]
    (_T98, 179): [142]
    (_T120, 179): [178]
    (_T118, 180): [176]
    (_T121, 180): [179]
    (_T25, 182): [95]
    (_T122, 183): [181]
    (_T123, 183): [182]
    (_T124, 184): [183]

    172: _T114 = 4    [ _T98 _T114 _T25 _T26 _T108 ]
    173: _T115 = (_T108 * _T114)    [ _T98 _T115 _T25 _T26 _T108 ]
    174: _T116 = (_T98 + _T115)    [ _T98 _T116 _T25 _T26 _T108 ]
    175: _T117 = *(_T116 + 0)    [ _T98 _T25 _T26 _T108 ]
    176: _T118 = 55    [ _T98 _T118 _T25 _T26 _T108 ]
    177: _T119 = 4    [ _T98 _T118 _T119 _T25 _T26 _T108 ]
    178: _T120 = (_T108 * _T119)    [ _T98 _T118 _T120 _T25 _T26 ]
    179: _T121 = (_T98 + _T120)    [ _T118 _T25 _T121 _T26 ]
    180: *(_T121 + 0) = _T118    [ _T25 _T26 ]
    181: _T122 = 0    [ _T25 _T26 _T122 ]
    182: _T123 = *(_T25 - 4)    [ _T25 _T26 _T122 _T123 ]
    183: _T124 = (_T122 < _T123)    [ _T25 _T26 _T122 _T124 ]
    184: END BY BEQZ, if _T124 = 0 : goto 32; 1 : goto 31
BASIC BLOCK 31 : 
  Def     = [ _T125 _T126 ]
  liveUse = [ _T122 ]
  liveIn  = [ _T25 _T26 _T122 ]
  liveOut = [ _T25 _T26 _T122 ]
  Use-Def Chain : 
    (_T122, 186): [181]
    (_T125, 186): [185]
    (_T126, 187): [186]

    185: _T125 = 0    [ _T25 _T26 _T122 _T125 ]
    186: _T126 = (_T122 < _T125)    [ _T25 _T26 _T122 _T126 ]
    187: END BY BEQZ, if _T126 = 0 : goto 33; 1 : goto 32
BASIC BLOCK 32 : 
  Def     = [ _T127 ]
  liveUse = [ ]
  liveIn  = [ _T25 _T26 _T122 ]
  liveOut = [ _T25 _T26 _T122 ]
  Use-Def Chain : 
    (_T127, 190): [189]

    189: _T127 = "Decaf runtime error: Array subscript out of bounds\n"    [ _T25 _T26 _T122 _T127 ]
    190: parm _T127    [ _T25 _T26 _T122 ]
    191: call _PrintString    [ _T25 _T26 _T122 ]
    192: call _Halt    [ _T25 _T26 _T122 ]
    193: END BY BRANCH, goto 33
BASIC BLOCK 33 : 
  Def     = [ _T128 _T129 _T130 _T131 _T132 _T133 _T134 _T135 _T136 _T137 ]
  liveUse = [ _T25 _T26 _T122 ]
  liveIn  = [ _T25 _T26 _T122 ]
  liveOut = [ _T25 _T26 _T133 _T134 _T135 ]
  Use-Def Chain : 
    (_T122, 195): [181]
    (_T128, 195): [194]
    (_T25, 196): [95]
    (_T129, 196): [195]
    (_T130, 197): [196]
    (_T131, 198): [197]
    (_T132, 201): [200]
    (_T26, 206): [25]
    (_T135, 207): [205]
    (_T136, 207): [206]
    (_T137, 208): [207]

    194: _T128 = 4    [ _T128 _T25 _T26 _T122 ]
    195: _T129 = (_T122 * _T128)    [ _T129 _T25 _T26 ]
    196: _T130 = (_T25 + _T129)    [ _T130 _T25 _T26 ]
    197: _T131 = *(_T130 + 0)    [ _T131 _T25 _T26 ]
    198: parm _T131    [ _T25 _T26 ]
    199: call _PrintInt    [ _T25 _T26 ]
    200: _T132 = " "    [ _T132 _T25 _T26 ]
    201: parm _T132    [ _T25 _T26 ]
    202: call _PrintString    [ _T25 _T26 ]
    203: _T133 = 2    [ _T133 _T25 _T26 ]
    204: _T134 = 100    [ _T133 _T134 _T25 _T26 ]
    205: _T135 = 0    [ _T133 _T134 _T135 _T25 _T26 ]
    206: _T136 = *(_T26 - 4)    [ _T133 _T134 _T135 _T136 _T25 _T26 ]
    207: _T137 = (_T135 < _T136)    [ _T133 _T134 _T135 _T25 _T137 _T26 ]
    208: END BY BEQZ, if _T137 = 0 : goto 35; 1 : goto 34
BASIC BLOCK 34 : 
  Def     = [ _T138 _T139 ]
  liveUse = [ _T135 ]
  liveIn  = [ _T25 _T26 _T133 _T134 _T135 ]
  liveOut = [ _T25 _T26 _T133 _T134 _T135 ]
  Use-Def Chain : 
    (_T135, 210): [205]
    (_T138, 210): [209]
    (_T139, 211): [210]

    209: _T138 = 0    [ _T133 _T134 _T135 _T25 _T26 _T138 ]
    210: _T139 = (_T135 < _T138)    [ _T133 _T134 _T135 _T25 _T26 _T139 ]
    211: END BY BEQZ, if _T139 = 0 : goto 36; 1 : goto 35
BASIC BLOCK 35 : 
  Def     = [ _T140 ]
  liveUse = [ ]
  liveIn  = [ _T25 _T26 _T133 _T134 _T135 ]
  liveOut = [ _T25 _T26 _T133 _T134 _T135 ]
  Use-Def Chain : 
    (_T140, 214): [213]

    213: _T140 = "Decaf runtime error: Array subscript out of bounds\n"    [ _T133 _T134 _T135 _T25 _T26 _T140 ]
    214: parm _T140    [ _T133 _T134 _T135 _T25 _T26 ]
    215: call _PrintString    [ _T133 _T134 _T135 _T25 _T26 ]
    216: call _Halt    [ _T133 _T134 _T135 _T25 _T26 ]
    217: END BY BRANCH, goto 36
BASIC BLOCK 36 : 
  Def     = [ _T141 _T142 _T143 _T144 _T145 _T146 ]
  liveUse = [ _T25 _T26 _T133 _T134 _T135 ]
  liveIn  = [ _T25 _T26 _T133 _T134 _T135 ]
  liveOut = [ ]
  Use-Def Chain : 
    (_T135, 219): [205]
    (_T141, 219): [218]
    (_T26, 220): [25]
    (_T142, 220): [219]
    (_T143, 221): [220]
    (_T134, 222): [204]
    (_T144, 223): [221]
    (_T25, 224): [95]
    (_T133, 226): [203]
    (_T145, 226): [225]
    (_T146, 227): [226]

    218: _T141 = 4    [ _T133 _T134 _T135 _T25 _T26 _T141 ]
    219: _T142 = (_T135 * _T141)    [ _T133 _T134 _T25 _T26 _T142 ]
    220: _T143 = (_T26 + _T142)    [ _T133 _T134 _T25 _T143 ]
    221: _T144 = *(_T143 + 0)    [ _T144 _T133 _T134 _T25 ]
    222: parm _T134    [ _T144 _T133 _T25 ]
    223: parm _T144    [ _T133 _T25 ]
    224: parm _T25    [ _T133 ]
    225: _T145 =  call _Main.Binky    [ _T145 _T133 ]
    226: _T146 = (_T133 * _T145)    [ _T146 ]
    227: parm _T146    [ ]
    228: call _PrintInt    [ ]
    229: END BY RETURN, void result

