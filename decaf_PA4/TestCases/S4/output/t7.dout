FUNCTION _Computer_New : 
BASIC BLOCK 0 : 
  Def     = [ _T4 _T5 _T6 _T7 ]
  liveUse = [ ]
  liveIn  = [ ]
  liveOut = [ ]
  Use-Def Chain : 
    (_T4, 2): [1]
    (_T5, 5): [3]
    (_T6, 5): [4]
    (_T5, 7): [3]
    (_T7, 7): [6]
    (_T5, 8): [3]

    1: _T4 = 8    [ _T4 ]
    2: parm _T4    [ ]
    3: _T5 =  call _Alloc    [ _T5 ]
    4: _T6 = 0    [ _T5 _T6 ]
    5: *(_T5 + 4) = _T6    [ _T5 ]
    6: _T7 = VTBL <_Computer>    [ _T5 _T7 ]
    7: *(_T5 + 0) = _T7    [ _T5 ]
    8: END BY RETURN, result = _T5

FUNCTION _Mac_New : 
BASIC BLOCK 0 : 
  Def     = [ _T8 _T9 _T10 _T11 ]
  liveUse = [ ]
  liveIn  = [ ]
  liveOut = [ ]
  Use-Def Chain : 
    (_T8, 2): [1]
    (_T9, 5): [3]
    (_T10, 5): [4]
    (_T9, 6): [3]
    (_T10, 6): [4]
    (_T9, 8): [3]
    (_T11, 8): [7]
    (_T9, 9): [3]

    1: _T8 = 12    [ _T8 ]
    2: parm _T8    [ ]
    3: _T9 =  call _Alloc    [ _T9 ]
    4: _T10 = 0    [ _T9 _T10 ]
    5: *(_T9 + 4) = _T10    [ _T9 _T10 ]
    6: *(_T9 + 8) = _T10    [ _T9 ]
    7: _T11 = VTBL <_Mac>    [ _T9 _T11 ]
    8: *(_T9 + 0) = _T11    [ _T9 ]
    9: END BY RETURN, result = _T9

FUNCTION _Main_New : 
BASIC BLOCK 0 : 
  Def     = [ _T12 _T13 _T14 ]
  liveUse = [ ]
  liveIn  = [ ]
  liveOut = [ ]
  Use-Def Chain : 
    (_T12, 2): [1]
    (_T13, 5): [3]
    (_T14, 5): [4]
    (_T13, 6): [3]

    1: _T12 = 4    [ _T12 ]
    2: parm _T12    [ ]
    3: _T13 =  call _Alloc    [ _T13 ]
    4: _T14 = VTBL <_Main>    [ _T13 _T14 ]
    5: *(_T13 + 0) = _T14    [ _T13 ]
    6: END BY RETURN, result = _T13

FUNCTION _Computer.Crash : 
BASIC BLOCK 0 : 
  Def     = [ _T15 _T16 ]
  liveUse = [ ]
  liveIn  = [ _T1 ]
  liveOut = [ _T1 _T15 ]
  Use-Def Chain : 
    (_T16, 2): [1]

    1: _T16 = 0    [ _T16 _T1 ]
    2: _T15 = _T16    [ _T1 _T15 ]
    3: END BY BRANCH, goto 2
BASIC BLOCK 1 : 
  Def     = [ _T17 _T18 ]
  liveUse = [ _T15 ]
  liveIn  = [ _T1 _T15 ]
  liveOut = [ _T1 _T15 ]
  Use-Def Chain : 
    (_T15, 6): [2, 7]
    (_T17, 6): [5]
    (_T18, 7): [6]

    5: _T17 = 1    [ _T1 _T17 _T15 ]
    6: _T18 = (_T15 + _T17)    [ _T1 _T18 ]
    7: _T15 = _T18    [ _T1 _T15 ]
    8: END BY BRANCH, goto 2
BASIC BLOCK 2 : 
  Def     = [ _T19 ]
  liveUse = [ _T1 _T15 ]
  liveIn  = [ _T1 _T15 ]
  liveOut = [ _T1 _T15 ]
  Use-Def Chain : 
    (_T1, 9): []
    (_T15, 9): [2, 7]
    (_T19, 10): [9]

    9: _T19 = (_T15 < _T1)    [ _T1 _T19 _T15 ]
    10: END BY BEQZ, if _T19 = 0 : goto 4; 1 : goto 3
BASIC BLOCK 3 : 
  Def     = [ _T20 ]
  liveUse = [ ]
  liveIn  = [ _T1 _T15 ]
  liveOut = [ _T1 _T15 ]
  Use-Def Chain : 
    (_T20, 12): [11]

    11: _T20 = "sad\n"    [ _T1 _T20 _T15 ]
    12: parm _T20    [ _T1 _T15 ]
    13: call _PrintString    [ _T1 _T15 ]
    14: END BY BRANCH, goto 1
BASIC BLOCK 4 : 
  Def     = [ ]
  liveUse = [ ]
  liveIn  = [ _T1 ]
  liveOut = [ _T1 ]
  Use-Def Chain : 

    0: END BY RETURN, void result

FUNCTION _Mac.Crash : 
BASIC BLOCK 0 : 
  Def     = [ _T21 ]
  liveUse = [ ]
  liveIn  = [ ]
  liveOut = [ ]
  Use-Def Chain : 
    (_T21, 2): [1]

    1: _T21 = "ack!"    [ _T21 ]
    2: parm _T21    [ ]
    3: call _PrintString    [ ]
    4: END BY RETURN, void result

FUNCTION main : 
BASIC BLOCK 0 : 
  Def     = [ _T22 _T23 _T24 _T25 _T26 ]
  liveUse = [ ]
  liveIn  = [ ]
  liveOut = [ ]
  Use-Def Chain : 
    (_T23, 2): [1]
    (_T22, 4): [2]
    (_T24, 5): [3]
    (_T22, 6): [2]
    (_T25, 7): [6]
    (_T26, 8): [7]

    1: _T23 =  call _Mac_New    [ _T23 ]
    2: _T22 = _T23    [ _T22 ]
    3: _T24 = 2    [ _T22 _T24 ]
    4: parm _T22    [ _T22 _T24 ]
    5: parm _T24    [ _T22 ]
    6: _T25 = *(_T22 + 0)    [ _T25 ]
    7: _T26 = *(_T25 + 8)    [ _T26 ]
    8: call _T26    [ ]
    9: END BY RETURN, void result

