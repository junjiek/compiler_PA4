FUNCTION _Main_New : 
BASIC BLOCK 0 : 
  Def     = [ _T1 _T2 _T3 ]
  liveUse = [ ]
  liveIn  = [ ]
  liveOut = [ ]
  Use-Def Chain : 
    (_T1, 2): [1]
    (_T2, 5): [3]
    (_T3, 5): [4]
    (_T2, 6): [3]

    1: _T1 = 4    [ _T1 ]
    2: parm _T1    [ ]
    3: _T2 =  call _Alloc    [ _T2 ]
    4: _T3 = VTBL <_Main>    [ _T2 _T3 ]
    5: *(_T2 + 0) = _T3    [ _T2 ]
    6: END BY RETURN, result = _T2

FUNCTION _Base_New : 
BASIC BLOCK 0 : 
  Def     = [ _T4 _T5 _T6 ]
  liveUse = [ ]
  liveIn  = [ ]
  liveOut = [ ]
  Use-Def Chain : 
    (_T4, 2): [1]
    (_T5, 5): [3]
    (_T6, 5): [4]
    (_T5, 6): [3]

    1: _T4 = 4    [ _T4 ]
    2: parm _T4    [ ]
    3: _T5 =  call _Alloc    [ _T5 ]
    4: _T6 = VTBL <_Base>    [ _T5 _T6 ]
    5: *(_T5 + 0) = _T6    [ _T5 ]
    6: END BY RETURN, result = _T5

FUNCTION _Sub1_New : 
BASIC BLOCK 0 : 
  Def     = [ _T7 _T8 _T9 ]
  liveUse = [ ]
  liveIn  = [ ]
  liveOut = [ ]
  Use-Def Chain : 
    (_T7, 2): [1]
    (_T8, 5): [3]
    (_T9, 5): [4]
    (_T8, 6): [3]

    1: _T7 = 4    [ _T7 ]
    2: parm _T7    [ ]
    3: _T8 =  call _Alloc    [ _T8 ]
    4: _T9 = VTBL <_Sub1>    [ _T8 _T9 ]
    5: *(_T8 + 0) = _T9    [ _T8 ]
    6: END BY RETURN, result = _T8

FUNCTION _Sub2_New : 
BASIC BLOCK 0 : 
  Def     = [ _T10 _T11 _T12 ]
  liveUse = [ ]
  liveIn  = [ ]
  liveOut = [ ]
  Use-Def Chain : 
    (_T10, 2): [1]
    (_T11, 5): [3]
    (_T12, 5): [4]
    (_T11, 6): [3]

    1: _T10 = 4    [ _T10 ]
    2: parm _T10    [ ]
    3: _T11 =  call _Alloc    [ _T11 ]
    4: _T12 = VTBL <_Sub2>    [ _T11 _T12 ]
    5: *(_T11 + 0) = _T12    [ _T11 ]
    6: END BY RETURN, result = _T11

FUNCTION _Sub3_New : 
BASIC BLOCK 0 : 
  Def     = [ _T13 _T14 _T15 ]
  liveUse = [ ]
  liveIn  = [ ]
  liveOut = [ ]
  Use-Def Chain : 
    (_T13, 2): [1]
    (_T14, 5): [3]
    (_T15, 5): [4]
    (_T14, 6): [3]

    1: _T13 = 4    [ _T13 ]
    2: parm _T13    [ ]
    3: _T14 =  call _Alloc    [ _T14 ]
    4: _T15 = VTBL <_Sub3>    [ _T14 _T15 ]
    5: *(_T14 + 0) = _T15    [ _T14 ]
    6: END BY RETURN, result = _T14

FUNCTION _Sub4_New : 
BASIC BLOCK 0 : 
  Def     = [ _T16 _T17 _T18 ]
  liveUse = [ ]
  liveIn  = [ ]
  liveOut = [ ]
  Use-Def Chain : 
    (_T16, 2): [1]
    (_T17, 5): [3]
    (_T18, 5): [4]
    (_T17, 6): [3]

    1: _T16 = 4    [ _T16 ]
    2: parm _T16    [ ]
    3: _T17 =  call _Alloc    [ _T17 ]
    4: _T18 = VTBL <_Sub4>    [ _T17 _T18 ]
    5: *(_T17 + 0) = _T18    [ _T17 ]
    6: END BY RETURN, result = _T17

FUNCTION main : 
BASIC BLOCK 0 : 
  Def     = [ _T19 _T20 _T21 _T22 _T23 _T24 _T25 _T26 _T27 _T28 _T30 _T31 ]
  liveUse = [ ]
  liveIn  = [ ]
  liveOut = [ _T19 _T30 _T31 ]
  Use-Def Chain : 
    (_T24, 2): [1]
    (_T25, 4): [3]
    (_T26, 6): [5]
    (_T27, 8): [7]
    (_T28, 10): [9]
    (_T19, 11): [2]
    (_T20, 13): [4]
    (_T21, 15): [6]
    (_T22, 17): [8]
    (_T23, 19): [10]
    (_T23, 21): [10]
    (_T19, 22): [21]
    (_T19, 25): [21]

    1: _T24 =  call _Base_New    [ _T24 ]
    2: _T19 = _T24    [ _T19 ]
    3: _T25 =  call _Sub1_New    [ _T19 _T25 ]
    4: _T20 = _T25    [ _T19 _T20 ]
    5: _T26 =  call _Sub2_New    [ _T19 _T20 _T26 ]
    6: _T21 = _T26    [ _T19 _T20 _T21 ]
    7: _T27 =  call _Sub3_New    [ _T19 _T20 _T21 _T27 ]
    8: _T22 = _T27    [ _T19 _T20 _T21 _T22 ]
    9: _T28 =  call _Sub4_New    [ _T19 _T20 _T21 _T22 _T28 ]
    10: _T23 = _T28    [ _T19 _T20 _T21 _T22 _T23 ]
    11: parm _T19    [ _T20 _T21 _T22 _T23 ]
    12: call _Main.printType    [ _T20 _T21 _T22 _T23 ]
    13: parm _T20    [ _T21 _T22 _T23 ]
    14: call _Main.printType    [ _T21 _T22 _T23 ]
    15: parm _T21    [ _T22 _T23 ]
    16: call _Main.printType    [ _T22 _T23 ]
    17: parm _T22    [ _T23 ]
    18: call _Main.printType    [ _T23 ]
    19: parm _T23    [ _T23 ]
    20: call _Main.printType    [ _T23 ]
    21: _T19 = _T23    [ _T19 ]
    22: parm _T19    [ _T19 ]
    23: call _Main.printType    [ _T19 ]
    24: _T30 = VTBL <_Sub1>    [ _T19 _T30 ]
    25: _T31 = *(_T19 + 0)    [ _T19 _T30 _T31 ]
    26: END BY BRANCH, goto 1
BASIC BLOCK 1 : 
  Def     = [ _T29 ]
  liveUse = [ _T30 _T31 ]
  liveIn  = [ _T19 _T30 _T31 ]
  liveOut = [ _T19 _T30 _T31 ]
  Use-Def Chain : 
    (_T30, 27): [24]
    (_T31, 27): [25, 29]
    (_T29, 28): [27]

    27: _T29 = (_T30 == _T31)    [ _T19 _T29 _T30 _T31 ]
    28: END BY BGTZ, if _T29 = 1 : goto 4; 0 : goto 2
BASIC BLOCK 2 : 
  Def     = [ ]
  liveUse = [ _T31 ]
  liveIn  = [ _T19 _T30 _T31 ]
  liveOut = [ _T19 _T30 _T31 ]
  Use-Def Chain : 
    (_T31, 29): [25, 29]
    (_T31, 30): [29]

    29: _T31 = *(_T31 + 0)    [ _T19 _T30 _T31 ]
    30: END BY BGTZ, if _T31 = 1 : goto 1; 0 : goto 3
BASIC BLOCK 3 : 
  Def     = [ _T32 _T33 _T34 _T35 _T36 _T37 _T38 ]
  liveUse = [ _T19 ]
  liveIn  = [ _T19 ]
  liveOut = [ _T19 ]
  Use-Def Chain : 
    (_T32, 32): [31]
    (_T19, 34): [21]
    (_T33, 35): [34]
    (_T34, 36): [35]
    (_T35, 39): [38]
    (_T36, 42): [41]
    (_T37, 43): [42]
    (_T38, 46): [45]

    31: _T32 = "Decaf runtime error: "    [ _T32 _T19 ]
    32: parm _T32    [ _T19 ]
    33: call _PrintString    [ _T19 ]
    34: _T33 = *(_T19 + 0)    [ _T33 _T19 ]
    35: _T34 = *(_T33 + 4)    [ _T34 _T19 ]
    36: parm _T34    [ _T19 ]
    37: call _PrintString    [ _T19 ]
    38: _T35 = " cannot be cast to "    [ _T19 _T35 ]
    39: parm _T35    [ _T19 ]
    40: call _PrintString    [ _T19 ]
    41: _T36 = VTBL <_Sub1>    [ _T19 _T36 ]
    42: _T37 = *(_T36 + 4)    [ _T19 _T37 ]
    43: parm _T37    [ _T19 ]
    44: call _PrintString    [ _T19 ]
    45: _T38 = "\n"    [ _T19 _T38 ]
    46: parm _T38    [ _T19 ]
    47: call _PrintString    [ _T19 ]
    48: call _Halt    [ _T19 ]
    49: END BY BRANCH, goto 4
BASIC BLOCK 4 : 
  Def     = [ _T20 ]
  liveUse = [ _T19 ]
  liveIn  = [ _T19 ]
  liveOut = [ ]
  Use-Def Chain : 
    (_T19, 50): [21]
    (_T20, 51): [50]

    50: _T20 = _T19    [ _T20 ]
    51: parm _T20    [ ]
    52: call _Main.printType    [ ]
    53: END BY RETURN, void result

FUNCTION _Main.printType : 
BASIC BLOCK 0 : 
  Def     = [ _T40 _T41 ]
  liveUse = [ _T0 ]
  liveIn  = [ _T0 ]
  liveOut = [ _T0 _T40 _T41 ]
  Use-Def Chain : 
    (_T0, 2): []

    1: _T40 = VTBL <_Sub4>    [ _T0 _T40 ]
    2: _T41 = *(_T0 + 0)    [ _T0 _T40 _T41 ]
    3: END BY BRANCH, goto 1
BASIC BLOCK 1 : 
  Def     = [ _T39 ]
  liveUse = [ _T40 _T41 ]
  liveIn  = [ _T0 _T40 _T41 ]
  liveOut = [ _T0 _T39 _T40 _T41 ]
  Use-Def Chain : 
    (_T40, 4): [1]
    (_T41, 4): [2, 6]
    (_T39, 5): [4]

    4: _T39 = (_T40 == _T41)    [ _T0 _T39 _T40 _T41 ]
    5: END BY BGTZ, if _T39 = 1 : goto 4; 0 : goto 2
BASIC BLOCK 2 : 
  Def     = [ ]
  liveUse = [ _T41 ]
  liveIn  = [ _T0 _T40 _T41 ]
  liveOut = [ _T0 _T40 _T41 ]
  Use-Def Chain : 
    (_T41, 6): [2, 6]
    (_T41, 7): [6]

    6: _T41 = *(_T41 + 0)    [ _T0 _T40 _T41 ]
    7: END BY BGTZ, if _T41 = 1 : goto 1; 0 : goto 3
BASIC BLOCK 3 : 
  Def     = [ _T39 ]
  liveUse = [ ]
  liveIn  = [ _T0 ]
  liveOut = [ _T0 _T39 ]
  Use-Def Chain : 

    8: _T39 = 0    [ _T0 _T39 ]
    9: END BY BRANCH, goto 4
BASIC BLOCK 4 : 
  Def     = [ ]
  liveUse = [ _T39 ]
  liveIn  = [ _T0 _T39 ]
  liveOut = [ _T0 ]
  Use-Def Chain : 
    (_T39, 0): [4, 8]

    0: END BY BEQZ, if _T39 = 0 : goto 6; 1 : goto 5
BASIC BLOCK 5 : 
  Def     = [ _T42 ]
  liveUse = [ ]
  liveIn  = [ _T0 ]
  liveOut = [ _T0 ]
  Use-Def Chain : 
    (_T42, 12): [11]

    11: _T42 = "Sub4\n"    [ _T0 _T42 ]
    12: parm _T42    [ _T0 ]
    13: call _PrintString    [ _T0 ]
    14: END BY BRANCH, goto 30
BASIC BLOCK 6 : 
  Def     = [ _T44 _T45 ]
  liveUse = [ _T0 ]
  liveIn  = [ _T0 ]
  liveOut = [ _T0 _T44 _T45 ]
  Use-Def Chain : 
    (_T0, 17): []

    16: _T44 = VTBL <_Sub3>    [ _T0 _T44 ]
    17: _T45 = *(_T0 + 0)    [ _T0 _T44 _T45 ]
    18: END BY BRANCH, goto 7
BASIC BLOCK 7 : 
  Def     = [ _T43 ]
  liveUse = [ _T44 _T45 ]
  liveIn  = [ _T0 _T44 _T45 ]
  liveOut = [ _T0 _T43 _T44 _T45 ]
  Use-Def Chain : 
    (_T44, 19): [16]
    (_T45, 19): [17, 21]
    (_T43, 20): [19]

    19: _T43 = (_T44 == _T45)    [ _T0 _T43 _T44 _T45 ]
    20: END BY BGTZ, if _T43 = 1 : goto 10; 0 : goto 8
BASIC BLOCK 8 : 
  Def     = [ ]
  liveUse = [ _T45 ]
  liveIn  = [ _T0 _T44 _T45 ]
  liveOut = [ _T0 _T44 _T45 ]
  Use-Def Chain : 
    (_T45, 21): [17, 21]
    (_T45, 22): [21]

    21: _T45 = *(_T45 + 0)    [ _T0 _T44 _T45 ]
    22: END BY BGTZ, if _T45 = 1 : goto 7; 0 : goto 9
BASIC BLOCK 9 : 
  Def     = [ _T43 ]
  liveUse = [ ]
  liveIn  = [ _T0 ]
  liveOut = [ _T0 _T43 ]
  Use-Def Chain : 

    23: _T43 = 0    [ _T0 _T43 ]
    24: END BY BRANCH, goto 10
BASIC BLOCK 10 : 
  Def     = [ ]
  liveUse = [ _T43 ]
  liveIn  = [ _T0 _T43 ]
  liveOut = [ _T0 ]
  Use-Def Chain : 
    (_T43, 0): [19, 23]

    0: END BY BEQZ, if _T43 = 0 : goto 12; 1 : goto 11
BASIC BLOCK 11 : 
  Def     = [ _T46 ]
  liveUse = [ ]
  liveIn  = [ _T0 ]
  liveOut = [ _T0 ]
  Use-Def Chain : 
    (_T46, 27): [26]

    26: _T46 = "Sub3\n"    [ _T0 _T46 ]
    27: parm _T46    [ _T0 ]
    28: call _PrintString    [ _T0 ]
    29: END BY BRANCH, goto 30
BASIC BLOCK 12 : 
  Def     = [ _T48 _T49 ]
  liveUse = [ _T0 ]
  liveIn  = [ _T0 ]
  liveOut = [ _T0 _T48 _T49 ]
  Use-Def Chain : 
    (_T0, 32): []

    31: _T48 = VTBL <_Sub2>    [ _T0 _T48 ]
    32: _T49 = *(_T0 + 0)    [ _T0 _T48 _T49 ]
    33: END BY BRANCH, goto 13
BASIC BLOCK 13 : 
  Def     = [ _T47 ]
  liveUse = [ _T48 _T49 ]
  liveIn  = [ _T0 _T48 _T49 ]
  liveOut = [ _T0 _T47 _T48 _T49 ]
  Use-Def Chain : 
    (_T48, 34): [31]
    (_T49, 34): [32, 36]
    (_T47, 35): [34]

    34: _T47 = (_T48 == _T49)    [ _T0 _T48 _T49 _T47 ]
    35: END BY BGTZ, if _T47 = 1 : goto 16; 0 : goto 14
BASIC BLOCK 14 : 
  Def     = [ ]
  liveUse = [ _T49 ]
  liveIn  = [ _T0 _T48 _T49 ]
  liveOut = [ _T0 _T48 _T49 ]
  Use-Def Chain : 
    (_T49, 36): [32, 36]
    (_T49, 37): [36]

    36: _T49 = *(_T49 + 0)    [ _T0 _T48 _T49 ]
    37: END BY BGTZ, if _T49 = 1 : goto 13; 0 : goto 15
BASIC BLOCK 15 : 
  Def     = [ _T47 ]
  liveUse = [ ]
  liveIn  = [ _T0 ]
  liveOut = [ _T0 _T47 ]
  Use-Def Chain : 

    38: _T47 = 0    [ _T0 _T47 ]
    39: END BY BRANCH, goto 16
BASIC BLOCK 16 : 
  Def     = [ ]
  liveUse = [ _T47 ]
  liveIn  = [ _T0 _T47 ]
  liveOut = [ _T0 ]
  Use-Def Chain : 
    (_T47, 0): [34, 38]

    0: END BY BEQZ, if _T47 = 0 : goto 18; 1 : goto 17
BASIC BLOCK 17 : 
  Def     = [ _T50 ]
  liveUse = [ ]
  liveIn  = [ _T0 ]
  liveOut = [ _T0 ]
  Use-Def Chain : 
    (_T50, 42): [41]

    41: _T50 = "Sub2\n"    [ _T0 _T50 ]
    42: parm _T50    [ _T0 ]
    43: call _PrintString    [ _T0 ]
    44: END BY BRANCH, goto 30
BASIC BLOCK 18 : 
  Def     = [ _T52 _T53 ]
  liveUse = [ _T0 ]
  liveIn  = [ _T0 ]
  liveOut = [ _T0 _T52 _T53 ]
  Use-Def Chain : 
    (_T0, 47): []

    46: _T52 = VTBL <_Sub1>    [ _T0 _T52 ]
    47: _T53 = *(_T0 + 0)    [ _T0 _T52 _T53 ]
    48: END BY BRANCH, goto 19
BASIC BLOCK 19 : 
  Def     = [ _T51 ]
  liveUse = [ _T52 _T53 ]
  liveIn  = [ _T0 _T52 _T53 ]
  liveOut = [ _T0 _T51 _T52 _T53 ]
  Use-Def Chain : 
    (_T52, 49): [46]
    (_T53, 49): [47, 51]
    (_T51, 50): [49]

    49: _T51 = (_T52 == _T53)    [ _T0 _T51 _T52 _T53 ]
    50: END BY BGTZ, if _T51 = 1 : goto 22; 0 : goto 20
BASIC BLOCK 20 : 
  Def     = [ ]
  liveUse = [ _T53 ]
  liveIn  = [ _T0 _T52 _T53 ]
  liveOut = [ _T0 _T52 _T53 ]
  Use-Def Chain : 
    (_T53, 51): [47, 51]
    (_T53, 52): [51]

    51: _T53 = *(_T53 + 0)    [ _T0 _T52 _T53 ]
    52: END BY BGTZ, if _T53 = 1 : goto 19; 0 : goto 21
BASIC BLOCK 21 : 
  Def     = [ _T51 ]
  liveUse = [ ]
  liveIn  = [ _T0 ]
  liveOut = [ _T0 _T51 ]
  Use-Def Chain : 

    53: _T51 = 0    [ _T0 _T51 ]
    54: END BY BRANCH, goto 22
BASIC BLOCK 22 : 
  Def     = [ ]
  liveUse = [ _T51 ]
  liveIn  = [ _T0 _T51 ]
  liveOut = [ _T0 ]
  Use-Def Chain : 
    (_T51, 0): [49, 53]

    0: END BY BEQZ, if _T51 = 0 : goto 24; 1 : goto 23
BASIC BLOCK 23 : 
  Def     = [ _T54 ]
  liveUse = [ ]
  liveIn  = [ _T0 ]
  liveOut = [ _T0 ]
  Use-Def Chain : 
    (_T54, 57): [56]

    56: _T54 = "Sub1\n"    [ _T0 _T54 ]
    57: parm _T54    [ _T0 ]
    58: call _PrintString    [ _T0 ]
    59: END BY BRANCH, goto 30
BASIC BLOCK 24 : 
  Def     = [ _T56 _T57 ]
  liveUse = [ _T0 ]
  liveIn  = [ _T0 ]
  liveOut = [ _T0 _T56 _T57 ]
  Use-Def Chain : 
    (_T0, 62): []

    61: _T56 = VTBL <_Base>    [ _T0 _T56 ]
    62: _T57 = *(_T0 + 0)    [ _T0 _T56 _T57 ]
    63: END BY BRANCH, goto 25
BASIC BLOCK 25 : 
  Def     = [ _T55 ]
  liveUse = [ _T56 _T57 ]
  liveIn  = [ _T0 _T56 _T57 ]
  liveOut = [ _T0 _T55 _T56 _T57 ]
  Use-Def Chain : 
    (_T56, 64): [61]
    (_T57, 64): [62, 66]
    (_T55, 65): [64]

    64: _T55 = (_T56 == _T57)    [ _T0 _T55 _T56 _T57 ]
    65: END BY BGTZ, if _T55 = 1 : goto 28; 0 : goto 26
BASIC BLOCK 26 : 
  Def     = [ ]
  liveUse = [ _T57 ]
  liveIn  = [ _T0 _T56 _T57 ]
  liveOut = [ _T0 _T56 _T57 ]
  Use-Def Chain : 
    (_T57, 66): [62, 66]
    (_T57, 67): [66]

    66: _T57 = *(_T57 + 0)    [ _T0 _T56 _T57 ]
    67: END BY BGTZ, if _T57 = 1 : goto 25; 0 : goto 27
BASIC BLOCK 27 : 
  Def     = [ _T55 ]
  liveUse = [ ]
  liveIn  = [ _T0 ]
  liveOut = [ _T0 _T55 ]
  Use-Def Chain : 

    68: _T55 = 0    [ _T0 _T55 ]
    69: END BY BRANCH, goto 28
BASIC BLOCK 28 : 
  Def     = [ ]
  liveUse = [ _T55 ]
  liveIn  = [ _T0 _T55 ]
  liveOut = [ _T0 ]
  Use-Def Chain : 
    (_T55, 0): [64, 68]

    0: END BY BEQZ, if _T55 = 0 : goto 30; 1 : goto 29
BASIC BLOCK 29 : 
  Def     = [ _T58 ]
  liveUse = [ ]
  liveIn  = [ _T0 ]
  liveOut = [ _T0 ]
  Use-Def Chain : 
    (_T58, 72): [71]

    71: _T58 = "Base\n"    [ _T0 _T58 ]
    72: parm _T58    [ _T0 ]
    73: call _PrintString    [ _T0 ]
    74: END BY BRANCH, goto 30
BASIC BLOCK 30 : 
  Def     = [ ]
  liveUse = [ ]
  liveIn  = [ _T0 ]
  liveOut = [ _T0 ]
  Use-Def Chain : 

    0: END BY RETURN, void result

